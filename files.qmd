---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Files {#sec-files}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```


```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

The following commands are designed for creating, managing, and manipulating files. Some of these commands will also work on directories (which we covered in the previous chapter).

## [Create]{style="font-size: 1.05em; font-weight: bold;"}  

To create a new file (`data/who_tb_data.txt`), use the **<code>@sec-touch</code>** command. 

```{bash}
touch data/who_tb_data.txt
```

We can add some contents to the `data/who_tb_data.txt` file using **<code>@sec-echo</code>** and the `>` operator.

```{bash}
echo "country	year	type	count
Afghanistan	1999	cases	745
Afghanistan	1999	population	19987071
Afghanistan	2000	cases	2666
Afghanistan	2000	population	20595360
Brazil	1999	cases	37737
Brazil	1999	population	172006362
Brazil	2000	cases	80488
Brazil	2000	population	174504898
China	1999	cases	212258
China	1999	population	1272915272
China	2000	cases	213766
China	2000	population	1280428583" > data/who_tb_data.txt
```

## [View]{style="font-size: 1.05em; font-weight: bold;"} 

**<code>@sec-file</code>** gives us a summary of what a file is or what it contains, like telling us what's in `data/who_tb_data.txt`.

```{bash}
file data/who_tb_data.txt
```

We can use **<code>@sec-head</code>** and **<code>@sec-tail</code>** to view the top and bottom of `data/who_tb_data.txt`.

```{bash}
head data/vg_hof.tsv
```


```{bash}
tail data/vg_hof.tsv
```


**<code>@sec-less</code>** lets you skim through a file on your computer, moving forwards and backwards as you please. We'll use less on the `data/vg_hof.tsv` file.

```{bash}
#| eval: false
less data/vg_hof.tsv
```


![Enter 'q' to exit the `less` scroll](img/less.gif){width='100%' fig-align='center'}


## [Search]{style="font-size: 1.05em; font-weight: bold;"} 

**<code>@sec-find</code>** is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, file type, and modification time. 
For example, the commands below look in the `data` directory for files with a `.txt` extension (`-name "*.txt"`) and finds files modified in the last 2 days (`-mtime -2`).

```{bash}
find data -name "*.txt" -mtime -1
```

## [Count]{style="font-size: 1.05em; font-weight: bold;"}

**<code>@sec-wc</code>** (**word count**) counts the number of lines, words, and characters in the given input. If a file name is provided, it performs the count on the file; otherwise, it reads from the standard input.

```{bash}
find data -name "*.txt" -mtime -1 | wc
```

```{bash}
#| include: false
counts=$(wc data/who_tb_data.txt | awk '{print $1, $2, $3}')
printf "   lines   words characters\n"
printf "%8s %7s %10s\n" $counts
```


## [Permissions & Priviledges]{style="font-size: 1.05em; font-weight: bold;"} 

`chown` & `sudo`

```{bash}
#| eval: false
chown
```

```{bash}
#| eval: false
sudo
```



```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
