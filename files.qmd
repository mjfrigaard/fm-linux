---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Files {#sec-files}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```


```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  icon = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

The following commands are designed for creating, managing, and manipulating files. Some of these commands will also work on directories (which we covered in the previous chapter).

## [Create]{style="font-size: 1.05em; font-weight: bold;"} 

The commands below can be used to create new files *or* update the timestamp of an existing file.

### `touch`

We'll start by creating a new file (`data/who_tb_data.tsv`) with **<code>@sec-touch</code>**:

```{bash}
#| label: touch
touch data/who_tb_data.tsv
```

We can confirm the new `who_tb_data.tsv` file was created, we'll use the `tree` command to check the `data` folder:

```{.bash style='background-color: #f8f8f8;'}
tree -P who_tb_data.tsv data
# data
# └── who_tb_data.tsv
# 
# 1 directory, 1 file
```

The `-P` option lets us specify a pattern to search for in the `data` folder, which we'll cover more in @sec-symbols-patterns.

### `echo`

We can add some contents to the `data/who_tb_data.tsv` file using **<code>@sec-echo</code>** and the `>` operator.[^who-tb-data-tsv] 

```{bash}
#| label: echo
echo "country	year	type	count
Afghanistan	1999	cases	745
Afghanistan	1999	population	19987071
Afghanistan	2000	cases	2666
Afghanistan	2000	population	20595360
Brazil	1999	cases	37737
Brazil	1999	population	172006362
Brazil	2000	cases	80488
Brazil	2000	population	174504898
China	1999	cases	212258
China	1999	population	1272915272
China	2000	cases	213766
China	2000	population	1280428583" > data/who_tb_data.tsv
```

[^who-tb-data-tsv]: `data/who_tb_data.tsv` comes from the [WHO global tuberculosis programme](https://www.who.int/teams/global-tuberculosis-programme/data#csv_files).

## [View]{style="font-size: 1.05em; font-weight: bold;"} 

**<code>@sec-cat</code>** concatenates and displays file contents. We can use this to view the entire `data/who_tb_data.tsv` file we just created: 

### `cat`

```{bash}
#| label: cat
cat data/who_tb_data.tsv
```

### `more` & `less`

**<code>@sec-less</code>** and **<code>@sec-more</code>** lets you skim through a file on your computer, moving forwards and backwards as you please. These commands are helpful for larger files, like the Video Game Hall of Fame data stored in the `data/vg_hof.tsv` file:[^vg-hof-data]

```{bash}
#| eval: false
#| label: more
more data/vg_hof.tsv
```

![Enter 'q' to exit the `more` scroll](img/more.gif){width='100%' fig-align='center'}

```{bash}
#| eval: false
#| label: less
less data/vg_hof.tsv
```


![Enter 'q' to exit the `less` scroll](img/less.gif){width='100%' fig-align='center'}

### `head` & `tail`

The **<code>@sec-head</code>** and **<code>@sec-tail</code>** commands let us view the tops and bottoms of files (the `-n3` specifies three rows from `data/vg_hof.tsv`).

```{bash}
#| label: head
head -n3 data/vg_hof.tsv
```

```{bash}
#| label: tail
tail -n3 data/vg_hof.tsv
```


[^vg-hof-data]: `data/vg_hof.tsv` is the [Video Game Hall of Fame data](https://en.wikipedia.org/wiki/World_Video_Game_Hall_of_Fame)

## [Look]{style="font-size: 1.05em; font-weight: bold;"} 

These commands can help you search for files (and directories).

### `grep`

**<code>@sec-grep</code>** searches files for lines matching a pattern. We'll use it to search for a specfic video game title in `data/vg_hof.tsv`:

```{bash}
#| label: grep
grep "The Oregon Trail" data/vg_hof.tsv
```


**<code>@sec-find</code>** is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, file type, and modification time. 

### `find`

The `.psv` extension is used for [pipe-separated files](https://en.wikipedia.org/wiki/Delimiter-separated_values) (`|`). We'll use `find` to locate any `.psv` files in `data/`:

```{bash}
#| label: find
find data -name "*.psv"
```

`find` can be very specific, too. For example, the commands below look in the `data` directory for tab-delimited files (i.e., with a `.tsv` extension modified in the last day.

```{bash}
#| label: find_adv
find data -name "*.tsv" -mtime -1
```

### `locate`

**<code>@sec-locate</code>** finds files by name quickly using a database.[^locate-setup]

[^locate-setup]: `locate` sometimes requires the search database is generated/updated. Read more [here](https://linuxize.com/post/locate-command-in-linux/)

```{bash}
#| eval: false
#| label: locate
locate who_tb_data data | head -n3
# /Users/username/projects/books/fm-unix/data/who_tb_data.csv
# /Users/username/projects/books/fm-unix/data/who_tb_data.psv
# /Users/username/projects/books/fm-unix/data/who_tb_data.tsv
```

```{r}
#| label: co_box_dev_locate
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "simple", 
  hsize = "1.15", 
  size = "1.00", 
  header = "Updating `locate` database", 
  fold = TRUE,
  contents = "
Make sure your `locate` database is up-to-date using one of the commands below if you've recently added or moved files to get accurate results:
  
\`\`\` sh
# on linux
sudo updatedb
\`\`\`

\`\`\` sh
# on macos
sudo /usr/libexec/locate.updatedb
\`\`\`
  
"
)
```

## [Manage]{style="font-size: 1.05em; font-weight: bold;"} 


The commands below can be used for copying, moving, renaming, and creating links to files.

### `cp`

Assume we want to create backups of the delimiter-separated data files in the `data/` folder. We'll store these backups in folders according the file extension.

First we'll create folder for each type of delimiter (`.csv`, `.tsv`, and `.psv`):

```{bash}
#| label: mkdir_data_types
mkdir data/csv
mkdir data/tsv
mkdir data/psv
```

Confirm with `tree -d`

```{bash}
#| eval: false
#| label: tree_data_types
tree data -d
# data
# ├── csv
# ├── psv
# └── tsv
# 
# 4 directories
```

Then we'll copy the files into their respective folder (based their extension) using `*` and **<code>@sec-cp</code>**:

```{bash}
#| label: cp_data_csv
cp data/*.csv data/csv/
```

```{bash}
#| eval: false
#| label: tree_data_csv
tree data/csv/
# data/csv/
# ├── pwrds.csv
# └── wu_tang.csv
# 
# 1 directory, 2 files
```


```{bash}
#| label: cp_data_csv_tsv
cp data/*.tsv data/tsv/
```

```{bash}
#| eval: false
#| label: cp_data_tsv
tree data/tsv/
# data/tsv/
# ├── music_vids.tsv
# ├── pwrds.tsv
# ├── trees.tsv
# ├── vg_hof.tsv
# ├── who_tb_data.tsv
# └── wu_tang.tsv
# 
# 1 directory, 6 files
```

```{bash}
cp data/*.psv data/psv/
```

```{bash}
#| eval: false
tree data/psv/
# data/psv/
# ├── who_tb_data.psv
# └── wu_tang.psv
# 
# 1 directory, 2 files
```

### `mv`

The commands below creates `.psv` and `.csv` versions of the `who_tb_data.tsv` file.

```{bash}
touch data/csv/who_tb_data.csv
echo "country,year,type,count
Afghanistan,1999,cases,745
Afghanistan,1999,population,19987071
Afghanistan,2000,cases,2666
Afghanistan,2000,population,20595360
Brazil,1999,cases,37737
Brazil,1999,population,172006362
Brazil,2000,cases,80488
Brazil,2000,population,174504898
China,1999,cases,212258
China,1999,population,1272915272
China,2000,cases,213766
China,2000,population,1280428583" > data/csv/who_tb_data.csv

touch data/who_tb_data.psv
echo "| country     | year | type       | count      |
|-------------|------|------------|------------|
| Afghanistan | 1999 | cases      | 745        |
| Afghanistan | 1999 | population | 19987071   |
| Afghanistan | 2000 | cases      | 2666       |
| Afghanistan | 2000 | population | 20595360   |
| Brazil      | 1999 | cases      | 37737      |
| Brazil      | 1999 | population | 172006362  |
| Brazil      | 2000 | cases      | 80488      |
| Brazil      | 2000 | population | 174504898  |
| China       | 1999 | cases      | 212258     |
| China       | 1999 | population | 1272915272 |
| China       | 2000 | cases      | 213766     |
| China       | 2000 | population | 1280428583 |" > data/who_tb_data.psv
```

Oops--it looks like the `who_tb_data.psv` file was created in the `data` folder! (and not the `data/psv` folder). [^tree-pattern]

```{bash}
#| eval: false
tree data -L 2 -P '*who_tb_data.psv|*who_tb_data.csv'
# data
# ├── csv
# │   └── who_tb_data.csv
# ├── psv
# ├── tsv
# └── who_tb_data.psv
# 
# 4 directories, 2 files
```

[^tree-pattern]: The `-L 2` option tells tree to only look in the data folder (no subfolders) and `-P '*who_tb_data.psv|*who_tb_data.csv'` matches the `who_tb_data.psv` *or* the `who_tb_data.csv` file.

We'll use **<code>@sec-mv</code>** to move the `who_tb_data.psv` and `data/who_tb_data.psv` files into `data/psv/` and confirm with `tree`:[^cp-mv-dirs]

```{bash}
mv data/who_tb_data.psv data/psv/who_tb_data.psv
```

```{bash}
#| eval: false
tree data/psv
# data/psv
# ├── who_tb_data.psv
# └── wu_tang.psv
# 
# 1 directory, 2 files
```

[^cp-mv-dirs]: `cp` and `mv` also work with directories. 

### `ln`

**<code>@sec-ln</code>** is used to create links between files. It can create two types of links: hard links and symbolic (or soft) links.

:::{layout="[50,50]" layout-valign="top"}

**A hard link** is an additional name for an existing file on the same file system, and is effectively an additional directory entry for the file. 

**A symbolic link** (often called a symlink) is a file that points to another file or directory, and it contains a path to another entry somewhere in the file system.

:::

With the `ln` command, you need to specify the target file first (the original file) and then the name of the new link:
  
```{bash}
#| label: ln_example
#| eval: false
ln original_file.txt new_link.txt
```

```{r}
#| label: co_box_ln_return
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.10", 
  size = "1.05", 
  header = "`ln`", 
  fold = TRUE,
  icon = FALSE,
  contents = "
  `ln` doesn’t produce any output and returns zero when it's successful.
  "
)
```

We'll use `ln` to create `data/who_tb_data.psv`, a hard link for the data file in `data/psv/who_tb_data.psv`:

```{bash}
#| label: ln_hard_link
ln data/psv/who_tb_data.psv data/who_tb_data.psv
```

If we check the `data` folder with `tree`, we see the new `who_tb_data.psv` file looks identical to the other files:

```{bash}
#| eval: false
tree data -P '*.psv'
# data
# ├── csv
# ├── psv
# │   ├── who_tb_data.psv
# │   └── wu_tang.psv
# ├── tsv
# ├── who_tb_data.psv
# └── wu_tang.psv
# 
# 4 directories, 4 files
```

Hard links are basically copies--changes made to one will reflect in the other since they both refer to the same data.

Now we'll use `ln -s` to create `data/who_tb_data.csv`, a *symlink* for the data file in `data/csv/who_tb_data.csv`.

```{bash}
#| label: ln_symlink
ln -s csv/who_tb_data.csv data/who_tb_data.csv
```

When we look at the folder with `tree` now, we see the symlink is listed with a special pointer (`->`) to the original file:

```{bash}
#| eval: false
tree data -P '*.csv'
# data
# ├── csv
# │   ├── pwrds.csv
# │   ├── who_tb_data.csv
# │   └── wu_tang.csv
# ├── psv
# ├── pwrds.csv
# ├── tsv
# ├── who_tb_data.csv -> data/csv/who_tb_data.csv
# └── wu_tang.csv
# 
# 4 directories, 6 files
```

The symbolic link only references the actual file, but doesn't store the data itself.

```{r}
#| label: co_box_ln
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  look = "simple", 
  hsize = "1.15", 
  size = "1.00", 
  header = "Tip: `ln` & `tree`", 
  fold = TRUE,
  contents = "
The `tree` command displays the target file first (the original file) and the link using color:

![Color for symlinks with `tree`](img/symlink-color.png){width='80%' fig-align='center'}

"
)
```

## [Info]{style="font-size: 1.05em; font-weight: bold;"} 

The commands below return different types of information from a files (or files).

### `ls`

The **<code>@sec-ls</code>** command lists the contents of a directory. Adding `-l` returns the contents in a detailed long format, showing information such as file permissions, number of links, owner, group, file size, and last modification date for each item.

We'll use `ls -l` on the hardlink we created and it's original file:

```{bash}
#| label: ls_l_hardlink_1
#| eval: false
ls -l data/who_tb_data.psv
# -rw-r--r--@ 2 username  staff  686 May  7 11:01 data/who_tb_data.psv
```

```{bash}
#| label: ls_l_hardlink_2
#| eval: false
ls -l data/psv/who_tb_data.psv
# -rw-r--r--@ 2 username  staff  686 May  7 11:01 data/psv/who_tb_data.psv
```

Both `ls -l` commands return similar information for the `who_tb_data.psv` files, indicating they're not treated as separate files, but rather two paths to the *same file*. 

The preceding `@ 2` indicates both files have two hard links, meaning `who_tb_data.psv` is physically located in one place but can be accessed from two locations: `data/who_tb_data.psv` and `data/psv/who_tb_data.psv`.

Compare this to the symlink we created with it's original file:

```{bash}
#| label: ls_l_symlink_1
#| eval: false
ls -l data/who_tb_data.csv
# lrwxr-xr-x@ 1 username  staff  19 May  7 10:56 data/who_tb_data.csv -> csv/who_tb_data.csv
```

```{bash}
#| label: ls_l_symlink_2
#| eval: false
ls -l data/csv/who_tb_data.csv
# -rw-r--r--@ 1 username  staff  381 May  7 11:01 data/csv/who_tb_data.csv
```

The `ls -l` output for `data/who_tb_data.csv` (the symlink) returns `lrwxr-xr-x` (file permissions for a symbolic link) and includes `@ 1`,  indicating a single hard link (symbolic links always have one link). 

The `who_tb_data.csv` file in `data/csv` returns `-rw-r--r--` (standard file permissions), 

We'll cover this output more in the @sec-file-permissions section below.

### `diff`

**<code>@sec-diff</code>** compare the contents of two files line-by-line. We'll use `diff` to compare the pipe-separated values file (`data/wu_tang.psv`) to the comma-separated separated values file (`data/wu_tang.csv`)

```{bash}
#| eval: false
diff data/wu_tang.psv data/wu_tang.csv
```

:::: {layout="[50,50]" layout-valign="top"}

```{.sh style="background-color: #f8f8f8; font-style: italic;"}
# 1,11c1,11
```

The first line of the output indicates that lines 1 through 11 in the first file (`data/wu_tang.psv`) have been changed compared to lines 1 through 11 in the second file (`data/wu_tang.csv`).

::::



:::: {layout="[50,50]" layout-valign="top"}

Lines starting with `<` indicate the content from the first file (`data/wu_tang.psv`). These entries are separated by pipes or spaces (as commonly used in PSV files).

```{.sh style="background-color: #f8f8f8; font-style: italic;"}
# < |Member           |Name                 |
# < |RZA              |Robert Diggs         |
# < |GZA              |Gary Grice           |
# < |Method Man       |Clifford Smith       |
# < |Raekwon the Chef |Corey Woods          |
# < |Ghostface Killah |Dennis Coles         |
# < |Inspectah Deck   |Jason Hunter         |
# < |U-God            |Lamont Hawkins       |
# < |Masta Killa      |Jamel Irief          |
# < |Cappadonna       |Darryl Hill          |
# < |Ol Dirty Bastard |Russell Tyrone Jones |
```

::::

:::: {layout="[50,50]" layout-valign="top"}

```{.sh style="background-color: #f8f8f8; font-style: italic;"}
# > Member,Name
# > RZA,Robert Diggs
# > GZA,Gary Grice
# > Method Man,Clifford Smith
# > Raekwon the Chef,Corey Woods
# > Ghostface Killah,Dennis Coles
# > Inspectah Deck,Jason Hunter
# > U-God,Lamont Hawkins
# > Masta Killa,Jamel Irief
# > Cappadonna,Darryl Hill
# > Ol Dirty Bastard,Russell Tyrone Jones
```

Lines starting with `>` show the content from the second file (`data/wu_tang.csv`). These entries are separated by commas, as is typical for CSV files.

::::

There is no difference in the actual data (`Member` or `Name`)--both files contain the same information, so the primary difference is purely in the formatting of the data: the PSV (pipe-separated Values) file uses vertical bars (`|`) and spaces to separate data fields, whereas the CSV (comma-separated values) file uses commas (`,`).[^tsv-csv-psv]

[^tsv-csv-psv]: This type of difference is significant if the format impacts how data is parsed or used. For example, a software program expecting data in CSV format might not correctly parse a PSV file, and vice versa.

What happens when we compare the symlink (`data/who_tb_data.csv`) and it's original file (`data/csv/who_tb_data.csv`) with `diff`?

```{bash}
#| eval: false
diff data/who_tb_data.csv data/csv/who_tb_data.csv
```

**`diff` returns nothing and doesn’t produce any output if there are no differences between the two files.**

Deleting, moving, or renaming the original file does not affect the integrity of a hard link:

```{bash}
#| label: remove_hard_link
# remove original file
rm data/psv/who_tb_data.psv
# check hard link
cat data/who_tb_data.psv
```



However, if the original file for a symlink is deleted, moved, or renamed, the symbolic link breaks and typically becomes a 'dangling' link that points to a non-existent path.



### `file`

**<code>@sec-file</code>** gives us a summary of what a file is or what it contains, like telling us what's in `data/who_tb_data.csv`.

```{bash}
#| label: file
file data/who_tb_data.csv
```

```{bash}
#| label: file_options
file -i data/who_tb_data.csv
```

### `readlink`

`readlink` displays the target of a symbolic link.

```{bash}
#| label: readlink_symlink
readlink data/who_tb_data.csv
```

The `-f` option provides the target's absolute path.

```{bash}
#| label: readlink_f_symlink
#| eval: false
readlink -f data/who_tb_data.csv
# /Users/username/path/to/data/csv/who_tb_data.csv
```

### `wc`

**<code>@sec-wc</code>** (**word count**) counts the number of lines, words, and characters in the given input. If a file name is provided, it performs the count on the file; otherwise, it reads from the standard input.

```{bash}
#| label: wc
wc data/who_tb_data.csv
```

### `stat`

**<code>@sec-stat</code>** displays detailed information about files.

```{bash}
#| label: stat
#| eval: false
stat data/who_tb_data.csv
# 16777221 317259283 lrwxr-xr-x 1 username staff 0 19 "May  8 13:20:37 2024" "May  8 13:20:37 2024" "May  8 13:20:37 2024" "May  8 13:20:37 2024" 4096 0 0 data/who_tb_data.csv
```

```{bash}
#| label: stat_l
#| eval: false
stat -l data/who_tb_data.csv
# lrwxr-xr-x 1 username staff 19 May  8 13:20:37 2024 data/who_tb_data.csv -> csv/who_tb_data.csv
```

### `du`

**<code>@sec-du</code>** estimates file space usage.

```{bash}
#| label: du
```

## [Permissions]{style="font-size: 1.05em; font-weight: bold;"} {#sec-file-permissions}

**<code>@sec-chmod</code>** changes file permissions, and **<code>@sec-chown</code>** changes file ownership.


```{bash}
#| include: false
#| label: reset
rm -Rf data/csv
rm -Rf data/tsv
rm -Rf data/psv
rm data/who_tb_data.csv
rm data/who_tb_data.psv
rm data/who_tb_data.tsv
```

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
