---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
---

# Arguments {#sec-args}

```{bash}
#| label: setup
#| include: false
whoami
```

```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

Arguments in Unix/Linux commands are values or data passed to commands for processing. Unlike options, which modify the behavior of commands, arguments typically specify what the command should *act upon*. This typically includes filenames, user names, data values, or other kinds of information the command needs to execute its task.
 
## Anatomy

A Unix command can be broken down into the command name, followed by its options (which we'll address in the next chapter), and then its arguments:

```{bash}
#| eval: false
command argument1 argument2 ... argument
```

## Argument Types 

Below are a variety of command arguments types. This is not an exhaustive list, but includes many of the commands and arguments you'll encounter on a regular basis.


### Files and Directories

**File and Directory Names**: Most commonly, arguments are the names of files or directories on which the command will operate.

**Example**

```{bash}
#| eval: false
cp source.txt destination.txt
```

`source.txt` and `destination.txt` are arguments representing the source and destination files to copy with <code>@sec-cp</code>, respectively.

### User and Group Names

**User and Group Names**: Commands related to user management might take usernames or group names as arguments.

**Example**

```{bash}
#| eval: false
chown user:group file
```

<code>@sec-chown</code> changes the ownership of `file` to `user` and `group`.

### Command Targets

**Command Targets**: Some commands take other commands as arguments. For example, <code>@sec-sudo</code> command runs command with superuser privileges.

**Example**

```{bash}
#| eval: false
sudo
```

### Data Values

**Data Values**: Commands might take data values as arguments for processing. 

**Example**

```{bash}
#| eval: false
echo Hello, World!
```

In `echo Hello, World!`, `Hello, World!` is an argument that <code>@sec-echo</code> prints to the terminal.

### Direct and Indirect 

**Direct Arguments**: These are the most straightforward type of arguments. They are typically the names of files or directories on which commands operate. 

**Example** 

```{bash}
cat myfile.txt
```


In the command `cat myfile.txt`, `myfile.txt` is a direct argument to the <code>@sec-cat</code> command, telling it which file to display on the standard output.

**Indirect Arguments**: These arguments might specify additional information that commands need to complete their tasks.

**Example** 

```{bash}
grep file myfile.txt
```

The `file` search pattern for the <code>@sec-grep</code> command is an example of an indirect command, and `myfile.txt` is the direct argument.

### Position

**Order**: For many commands, the order of the arguments is significant. 

**Example** 

```{bash}
cp myfile.txt myfile2.txt
```

`myfile.txt` is the first argument (indicating the file to copy from), and `myfile2.txt` is the second argument (indicating where to copy the file to). Reversing these arguments would result in a completely different operation.

**Spaces**: Arguments that contain spaces must be quoted or escaped, so the shell understands them as a single argument rather than multiple arguments. 

**Example** 

To copy the contents of `New myfile2.txt` to `'my file 3.txt`, you would use:

```{bash}
cp myfile2.txt 'my file 3.txt'
```

### Command Substitution

**Using Output as Arguments**: The output of a command can be used as an argument for another command using backticks (\` \`) or `$( )`. 

**Example** 

`echo $(grep file myfile.txt)` uses the output of the <code>@sec-grep</code> command as an argument for <code>@sec-echo</code>:

```{bash}
echo $(grep file myfile.txt)
```

### Environmental Variables

**Variables as Arguments**: Environment variables can be used as arguments in commands. 

**Example** 

`echo $HOME` prints the path to the user's home directory, where `$HOME` is an argument that the <code>@sec-echo</code> command interprets:

```{bash}
#| eval: false
echo $HOME
#> /Users/username
```


Understanding the nuances of Unix arguments is crucial for crafting precise and effective commands, allowing users to leverage the full power of the Unix command line for a wide array of tasks.

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
