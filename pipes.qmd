---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Pipes {#sec-pipes}

```{bash}
#| label: setup
#| include: false
whoami
```

```{r}
#| label: common
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_rev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is being revised. Thank you for your patience."
)
```

The Linux pipe, denoted by the vertical bar `|`, is a powerful feature of Linux and Linux-like operating systems that allows the output of one command (`stdout`) to be used as the input to another (`stdin`). This capability forms the basis of the Linux philosophy of building small, modular utilities that do one thing well and connecting them together to perform complex tasks.

## [Fundamental Concept]{style="font-size: 1.05em; font-weight: bold;"} 

The pipe is placed between two commands and directs the standard output (`stdout`) of the command to the left of the pipe to the standard input (`stdin`) of the command to the right.

```{r}
#| label: co_box_stdin_stdout
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "simple", 
  hsize = "1.15", 
  size = "1.00", 
  header = "Standard Input and Output", 
  fold = TRUE,
  contents = "

<br>

+ `stdin` (standard input) is a text stream from which a command reads its input. By default, it's the keyboard, but it can be redirected to read from a file or another command's output.\n
  
+ `stdout` (standard output) is a text stream where a command writes its output. Typically, this is the terminal screen, but it can be redirected to a file or another command's input.")
```

**Example**

**`echo "Hello, World!" | wc -w`** sends the output of the <code>@sec-echo</code> command to <code>@sec-wc</code>, which then counts the words.

```{bash}
echo "Hello, World!" | wc -w
```

The output is `2`, indicating there are two words in "Hello, World!".

## [Combining Pipes]{style="font-size: 1.05em; font-weight: bold;"} 

Commands can be chained together using multiple pipes, allowing for the creation of command pipelines where data is processed in stages.

**Example**

**<code>@sec-ps</code>`aux | `<code>@sec-grep</code> `httpd`** lists all processes, filters those containing "httpd" (HTTPD = web server processes running):

```{bash}
ps aux | grep httpd
```

**Example**

**<code>@sec-wc</code>` -l`** counts the number of lines:

```{bash}
ps aux | grep httpd | wc -l
```

### Filtering and Processing

**Example 1**

**<code>@sec-cat</code>`data/roxanne.txt | `<code>@sec-grep</code>` "night"`** displays lines from `data/roxanne.txt` that contain the number `"2"`.

```{bash}
cat data/raw/roxanne.txt | grep "night"
```

Here, <code>@sec-cat</code> outputs the file's contents, which <code>@sec-grep</code> filters.

**Example 2**

**<code>@sec-ls</code>` -l data/raw | `<code>@sec-sort</code>` -r`** lists the files in `data/raw` in a detailed format, then sorts them in reverse order.

```{bash}
ls -l data/raw | sort -r
```

It showcases how to reverse the listing of directory contents.

### Transformation and Reduction

**Example**

**<code>@sec-find</code>` . -type f | `<code>@sec-xargs</code>` du -sh | `<code>@sec-sort</code>` -h`** finds files (`-type f`) in the current directory and subdirectories, calculates their sizes (`du -sh`), and sorts them by size (`sort -h`):

```{bash}
find data -type f | xargs du -sh | sort -h
```

This pipeline not only identifies files but also sorts them by their disk usage, illustrating a complex operation made simple through pipes.

### Real-time Streaming and Monitoring

**Example**

**`cat /var/log/system.log | grep DEAD_PROCESS`** prints the `system.log` file, continuously monitoring for new entries, filters for those containing `DEAD_PROCESS`, then counts the number of lines:[^pipes-1]

[^pipes-1]: `tail -f /var/log/syslog | grep sshd` is useful for real-time monitoring of SSH daemon logs.

```{bash}
#| eval: false
cat /var/log/system.log | grep "DEAD_PROCESS" 
## Apr 10 06:35:23 Users-MacBook-Pro login[3596]: DEAD_PROCESS: 3596 ttys000
## Apr 10 06:35:25 Users-MacBook-Pro sessionlogoutd[19895]: DEAD_PROCESS: 225 console
## Apr 10 10:20:25 Users-MacBook-Pro login[715]: DEAD_PROCESS: 715 ttys000
```

### Data Manipulation

**Example**

**`cut -d':' -f1 data/roxanne.txt | sort | uniq`** extracts the first field from each line in `data/roxanne.txt`, sorts the contents alphabetically, and removes duplicates.

```{bash}
cut -d':' -f1 data/raw/roxanne.txt | sort | uniq
```

This sequence is an example of performing data extraction and deduplication.

## [Pipes with Loops]{style="font-size: 1.05em; font-weight: bold;"} 

The example below demonstrates how to use the `while` loop with pipes with `find`, `echo`, `grep`, and `wc`.

### Filter with `find`

**`find data -name "*.tsv"`** starts in the `data` directory, looking for all files that end with the `.tsv` extension. The search is recursive, meaning it includes all subdirectories of `data` as well. Produces a list of paths to `.tsv` files, each path on a new line. This list is piped to the next command.

```{bash}
#| eval: true 
find data -name "*.tsv" 
```

### Iterate with `while` and `do`

**`| while read fname; do`**: The pipe (`|`) feeds the output from the <code>@sec-find</code> command into a `while` loop, which reads each line (file name) into the variable `fname`, one at a time. For each iteration of the loop (i.e., for each file name read into `fname`), the commands within the `do ... done` block are executed.

```{bash}
#| eval: false 
find data -name "*.tsv" | while read fname; do
  # do this!
done
```

### Print with `echo` 

**`echo -n "$fname: "`**: Prints the current file's name being processed. <code>@sec-echo</code>`-n` outputs the value of `fname` (the path to the current `.tsv` file) followed by a colon and a space, without adding a newline at the end. This means the count returned by <code>@sec-wc</code> will be printed on the same line, right after the file name.

```{bash}
#| eval: true 
find data -name "*.tsv" | while read fname; do
  echo -n "$fname: "
done
```

### Search with `grep`

**`grep "RZA" "$fname"`**: Searches for a specific pattern within the file. <code>@sec-grep</code> looks through the contents of the file (whose path is in `fname`) for lines containing the string "RZA". Only the lines that match this pattern are printed to `stdout`, which is then piped to <code>@sec-wc</code>.

```{bash}
#| eval: true 
find data -name "*.tsv" | while read fname; do
  echo -n "$fname: "
  grep "RZA" "$fname"
done
```

### Count with `wc`

**`wc`**: For each file processed by the loop, <code>@sec-wc</code> outputs three numbers: the line count, word count, and character/byte count of the lines that <code>@sec-grep</code> found to contain "RZA". Since no specific option is given to <code>@sec-wc</code>, it defaults to displaying all three counts.

```{bash}
#| eval: true 
find data -name "*.tsv" | while read fname; do
  echo -n "$fname: "
  grep "RZA" "$fname" | wc 
done
```

```{bash}
#| include: false
#| eval: true 
find data -name "*.tsv" | while read fname; do
  echo -n "$fname: "
  grep "RZA" "$fname" | wc 
done
```

```{bash}
#| include: false
counts=$(wc data/music_vids.tsv | awk '{print $1, $2, $3}')
printf "   lines   words characters\n"
printf "%8s %7s %10s\n" $counts
```

This Bash command sequence combines <code>@sec-find</code>, a `while` loop, <code>@sec-echo</code>, <code>@sec-grep</code>, and <code>@sec-wc</code> to search through `.tsv` (Tab-Separated Values) files for lines containing a specific pattern ("RZA") and reports the count of lines, words, and characters for each occurrence. Combining pipelines with loops is an efficient way to sift through a potentially large set of files within a directory, facilitating a detailed aggregation of specified conditions across multiple files.

```{r}
#| label: co_box_pipe_consids
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  look = "default", 
  hsize = "1.15", 
  size = "1.00", 
  header = "Considerations when using pipes", 
  fold = TRUE,
  contents = "\n

**Efficiency and Performance**

While pipes are incredibly powerful, their use can impact performance, especially when processing large amounts of data. Each pipe involves creating a new subprocess, and data is copied between processes, which can lead to overhead.

**Error Handling**

Error handling in pipes can be non-trivial, as each command in a pipeline executes independently. Users need to consider how each command handles errors and ensure that the pipeline as a whole behaves as expected even when errors occur.")
```


## [Recap]{style="font-size: 1.05em; font-weight: bold;"} 

Pipes (`|`) allow the output of one command (`stdout`) to be used as the input (`stdin`) to another, enabling the chaining of commands to perform complex tasks with the output of one serving as the input for the next. Linux pipes embody the concept of composability in Linux, enabling users to build complex workflows out of simple, single-purpose programs. They are a testament to the flexibility and power of the Linux command line, facilitating a wide range of tasks from simple text processing to sophisticated data analysis and system monitoring.

This framework of commands, arguments, options, and the interplay of input (`stdin`), output (`stdout`) , and pipes enables sophisticated data processing and manipulation directly from the terminal.

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
