---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Options {#sec-options}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```


```{r}
#| label: co_box_rev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is being revised. Thank you for your patience."
)
```



Unix command options (sometimes called flags) are often preceded by a hyphen (`-`) or two (`--` for long-form options) and modify the behavior of a command. Options provide flexibility, control, and, in some cases, enable a vast array of additional functionalities. 

## [Option types]{style="font-size: 1.05em; font-weight: bold;"} 
 
Arguments can be short or long:

:::{layout="[50,50]" layout-valign="top"}

**Short options** are typically a single dash followed by a single letter (e.g., `-l`) and they modify the command behavior in a specific, often concise way. 


**Long options** usually use two dashes followed by a word or compound words (e.g., `--long-listing`) and provide a more descriptive way to specify options, making scripts and commands more readable. 

:::

### Short options 

**Example**

<code>@sec-ls</code> `-l data` lists files in `data` in a long format, showing detailed information like permissions, owner, size, and modification date:

```{bash}
ls -l data
```

### Long options 

**Example 1**

`tree data --sort size` lists files in order according to size:

```{bash}
#| eval: false
tree data --sort size
# ├── ajperlis_epigrams.txt
# ├── pwrds.csv
# ├── pwrds.tsv
# ├── README.md
# ├── music_vids.tsv
# ├── vg_hof.tsv
# ├── trees.tsv
# ├── roxanne.txt
# ├── wu_tang.dat
# ├── who_tb_data.tsv
# ├── who_tb_data.txt
# ├── wu_tang.txt
# ├── wu_tang.csv
# ├── wu_tang.tsv
# ├── roxanne_rev.txt
# └── roxanne_orig.txt
# 
# 1 directory, 16 files
```

**Example 2**

<code>@sec-grep</code> ` --help` displays usage information for the `grep` command, helping users understand available options and syntax.

```{bash}
#| eval: false
grep --help
#> usage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]
#> 	[-e pattern] [-f file] [--binary-files=value] [--color=when]
#> 	[--context[=num]] [--directories=action] [--label] [--line-buffered]
#> 	[--null] [pattern] [file ...]
```

**Example 3**

The `--version` option is commonly used to get version information for various commands.

```{bash}
grep --version  
```


**Note that not all commands support the long-form option syntax.**

### Modifying behavior

Some options modify the commands behavior.

**Example**

<code>@sec-cp</code>`-n source.txt dest.txt` does not overwrite the destination file if it already exists. 

```{bash}
#| echo: false
touch myfile.txt
echo "This is my file" > myfile.txt
touch myfile2.txt
echo "This is my 2nd file" > myfile2.txt
```

```{bash}
cat myfile.txt
```

```{bash}
#| eval: false
cp -n myfile.txt myfile2.txt
```

The `-n` option modifies the default behavior of the `cp` command.

```{bash}
cat myfile2.txt
```

### Modifying output

Other options modify a commands output.

**Example 1**

`ls -a` lists all files, including hidden ones (those starting with a dot). This option alters the command's output by showing files that are not listed by default.

```{bash}
ls -a data
```

**Example 2**

`df -h` shows disk space usage in human-readable form (e.g., KB, MB, GB), modifying the default output to be more easily understood.

```{bash}
#| eval: false
df -h
# Filesystem                          Size    Used   Avail Capacity iused ifree %iused  Mounted on
# /dev/disk1s1s1                     466Gi   9.5Gi    40Gi    20%    404k  422M    0%   /
# devfs                              201Ki   201Ki     0Bi   100%     696     0  100%   /dev
# /dev/disk1s3                       466Gi   2.4Gi    40Gi     6%    5.1k  422M    0%   /System/Volumes/Preboot
# /dev/disk1s5                       466Gi   1.0Gi    40Gi     3%       1  422M    0%   /System/Volumes/VM
# /dev/disk1s6                       466Gi    19Mi    40Gi     1%      19  422M    0%   /System/Volumes/Update
# /dev/disk1s2                       466Gi   411Gi    40Gi    92%    6.3M  422M    1%   /System/Volumes/Data
# map auto_home                        0Bi     0Bi     0Bi   100%       0     0     -   /System/Volumes/Data/home
```

### Environment-specific options

The `-u` option in <code>@sec-sort</code> removes duplicate lines. `-u`s behavior (considering case sensitivity) might vary depending on the locale and environment settings.

**Example**

`sort -u data/roxanne.txt` sorts the lines in `data/roxanne.txt`, removing duplicate lines.[^roxanne]

[^roxanne]: `data/roxanne.txt` contains the lyrics to the 1978 song [Roxanne by The Police](https://en.wikipedia.org/wiki/Roxanne_(The_Police_song)). 

```{bash}
sort -u data/roxanne.txt
```

## [Combining Options]{style="font-size: 1.05em; font-weight: bold;"} 

Multiple short options can be combined after a single dash, without spaces (e.g., `-lrt`)
allowing users to use multiple options at once, and reducing the need to type multiple dashes.

### Multiple short options

Options can be combined with arguments when they are followed by a space and then the argument (e.g., `-o filename`). 

**Example**

`ls -lrt` combines three options: `-l` (long listing format), `-r` (reverse order), and `-t` (sort by modification time), providing a detailed, reverse-chronological list of files.

```{bash}
ls -lrt data
```

### Options with values

Some options require or accept an argument to specify a value related to the option's action.

**Example**

<code>@sec-grep</code>`-i "FILE" myfile.txt` uses `-i` to ignore case when searching for `"FILE"` in `myfile.txt`:

```{bash}
grep -i "FILE" myfile.txt
```

The `"FILE"` here is an argument for the `-i` option.

## [Recap]{style="font-size: 1.05em; font-weight: bold;"} 

Options greatly enhance the power and versatility of Unix commands, allowing users to tailor operations to their specific needs and preferences.

Not all Unix-like systems or shells may support the same options for a given command, and behavior can vary between implementations. It's important to refer to a command's manual page (using `man command` or `command --help`) for the most accurate and comprehensive list of options and their effects.


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```

```{bash}
rm myfile.txt
rm myfile2.txt
```

