---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
---

# Set-Up {.unnumbered}

```{r}
#| label: setup
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

## Using Bash in Quarto 

Quarto is an open-source scientific and technical publishing framework that enables users to create dynamic and beautiful documents, reports, presentations, and dashboards. 

Quarto documents are built to work with various programming languages, including R, Python, Julia, and Observable JavaScript, which makes it a versatile tool for data scientists, researchers, and anyone involved in data analysis. However, you can also use Quarto to run Unix commands--specifically, Bash.[^quarto-bash] 

[^quarto-bash]: Follow these instructions on the [Quarto website](https://quarto.org/docs/computations/execution-options.html#shell-commands) to configure your HTML documents to run Bash code chunks. 

### Document header

Specify the `engine` field of in the YAML header of the `.qmd` file, and any `knitr` chunk options:

```yaml
---
title: "Using Bash"
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
---
```

### Code Chunks

> "*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*" - [Donald Knuth. "Literate Programming (1984)" in Literate Programming. CSLI, 1992, pg. 99.](http://www.literateprogramming.com/index.html)

Quarto documents are written in markdown, a lightweight markup language thatâ€™s easy to write and read. This simplicity allows authors to focus on their content rather than formatting. One of the powerful aspects of Quarto is its ability to integrate executable code chunks into Markdown documents (in fact, this entire book was created using markdown and executable code chunks).

```{{bash}}
echo "foo" 
```

You can also specify the code chunk options with the hash-pipe (`#|`):

```{bash}
#| code-fold: show 
#| code-summary: 'show/hide echo'
echo "foo"
```

```{{bash}}
#| code-fold: show
#| code-summary: 'show/hide echo'
echo "foo" 
```



## Terminal (macOS)

## Virtual Machines

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```