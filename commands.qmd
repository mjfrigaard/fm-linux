---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Commands {#sec-commands}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```


```{r}
#| label: co_box_rev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is being revised. Thank you for your patience."
)
```

Commands are the first part of a command line instruction, specifying the program or built-in functionality to be executed. In Unix/Linux, several commands can operate without any options or arguments, performing their basic functions in their simplest form.

We're going to start with a basic command: `date`:

```{bash}
date
```

The command `date` returns the current date and time. What we've just done is referred to as the [read–eval–print loop](https://www.computerhope.com/jargon/r/repl.htm), or REPL, and it's the underlying process of the command-line. 

## [REPL]{style="font-size: 1.05em; font-weight: bold;"}

The REPL in Bash exemplifies a powerful and flexible interface for interacting with the system, running commands, and developing scripts, providing both novice and experienced users with an efficient way to manage their computing environment.

Here is how it works: 

### 1. Read

In the Bash, the "Read" step occurs when the shell waits for input from the user. This is typically represented by the shell prompt, where we can type commands. 

The prompt might display useful information, such as the current user (`username`), hostname (`hostname`), and working directory (`current_directory`), depending on its configuration.

:::{style="font-size: 1.10em; color: #2c8475;"}

<pre>
  <strong>username</strong>@<strong>hostname</strong>:<strong>current_directory</strong>$
</pre>

:::


### 2. Eval

Once a command is entered, Bash "evaluates" it. This step involves parsing the command and its arguments, checking for syntax correctness, and then executing it. 

:::{style="font-size: 1.10em; color: #2c8475;"}

<pre>
  username@hostname:current_directory$ <strong>date</strong>
</pre>

:::

Commands can be simple, such as listing the current date and time, or complex scripts involving loops, conditionals, and functions.

### 3. Print

After evaluating the command, Bash "prints" the output or the result of the command execution to the screen (`stdout` or standard output) or another specified location. 

:::{style="font-size: 1.10em; color: #2c8475;"}

<pre>
  # Wed Apr 10 02:55:23 MST 2024
</pre>

:::

### Loop

After executing a command and returning the output, Bash immediately returns to the "read" step, displaying the prompt and waiting for new user input. 

```{bash}
#| eval: false
username@hostname:current_directory$
username@hostname:current_directory$ date
#> Wed Apr 10 02:55:23 MST 2024
username@hostname:current_directory$
```

This cycle repeats indefinitely until the user exits the REPL environment, typically with an `exit` command or by pressing **<kbd>Ctrl</kbd>** + **<kbd>D</kbd>**.

## [Basic commands]{style="font-size: 1.05em; font-weight: bold;"} 

In Unix, several commands can operate without any options or arguments, performing their basic functions in their simplest form. Below are some of these commands:

### `who` 

<code><strong>@sec-who</strong></code> shows who is logged on the system. 

```{bash}
#| eval: false 
who
# username       console      Apr 14 13:45 
# username       ttys000      Apr 14 13:45 
# username       ttys001      Apr 14 13:45 
# username       ttys003      Apr 16 05:56
```

`who` by itself, without options or arguments, lists the users currently logged into the system.

### `whoami` 

<code><strong>@sec-whoami</strong></code> shows the username of the user currently logged into the system. 

```{bash}
#| eval: false 
whoami
# username
```

### `hostname` 

<code><strong>@sec-hostname</strong></code> displays the system's network name.

```{bash}
#| eval: false
hostname
# Users-MacBook-Pro-2.local
```

### `cal` 

<code><strong>@sec-cal</strong></code> displays a calender of the current month.

```{bash}
#| eval: false 
cal
#      April 2024       
# Su Mo Tu We Th Fr Sa  
#     1  2  3  4  5  6  
#  7  8  9 10 11 12 13  
# 14 15 16 17 18 19 20  
# 21 22 23 24 25 26 27  
# 28 29 30              
# 
```

### `uptime` 

<code><strong>@sec-uptime</strong></code> shows how long the system has been running.

```{bash}
#| eval: false 
uptime
# 11:39  up 15:05, 4 users, load averages: 3.85 3.08 2.93
```

### `clear` 

<code><strong>@sec-clear</strong></code> clears the terminal screen and doesn’t print any return values.

```{bash}
#| eval: false
clear
```

`clear` does its job without the need for additional input.

### `exit` 

<code><strong>@sec-exit</strong></code> exits the shell or your current session. 

```{bash}
#| eval: false
exit
```

`exit` requires no arguments or options to execute this action, and doesn't print any return values.

###  `yes` 

<code><strong>@sec-yes</strong></code> repeatedly outputs a string until killed. Without arguments, it defaults to outputting 'y'.

```{bash}
#| eval: false
yes
```

**NOTE:** Use **<kbd>Ctrl</kbd>** + **<kbd>C</kbd>** to interrupt the `yes` command.

## [Recap]{style="font-size: 1.05em; font-weight: bold;"}

Each of these commands performs a specific and often utilized function within the Unix environment, embodying the Unix philosophy of doing one thing well.

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
