---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
---

# Shells {#sec-shells}

```{bash}
#| label: setup
#| include: false
whoami
```

```{r}
#| label: common
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_rev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is being revised. Thank you for your patience."
)
```

A **Shell** is a program that interprets commands and acts as an intermediary between the user and the kernel of the operating system. The sections below cover common Shells. Shells can be either command-line based or graphical. Some popular examples of shells include Bash, Zsh, and Fish.

List all the available shells with the commands below:

```{bash}
cat /etc/shells
```

To change the default shell, use the `chsh` command (change shell). For example, if you want to switch to `bash`, use the command below:

```{bash}
#| eval: false
chsh -s /bin/bash
```

You can use the <strong><code>@sec-echo</code></strong> and <strong><code>@sec-ps</code></strong> commands to verify the shell you're currently using:

```{bash}
#| eval: false
echo $SHELL
# /bin/bash
```

```{bash}
#| eval: false
ps -p $$
#   PID TTY           TIME CMD
# 16082 ttys003    0:00.02 -bash
```

## ![](img/bash-logo.svg){fig-align="right" width="12%"} [Bash]{style="font-weight: bold;"} {#sec-bash}

Introduced in 1989, [**Bash, or the Bourne Again SHell**](https://www.gnu.org/software/bash/) has become the default command-line interface or shell for most Linux distributions. Incorporating features from the Korn shell ([`ksh`](https://en.wikipedia.org/wiki/KornShell)) and the C shell ([`csh`](https://en.wikipedia.org/wiki/C_shell)), Bash supports features like command history, tab completion, aliases and scripting tasks.[^sh_term-1]

[^sh_term-1]: Bash was the default command-line interface for Apple's macOS (which is Linux-based) until the transition to `zsh` as the default shell in [macOS Catalina.](https://support.apple.com/en-us/102360)

### Key features

**Programming**

Bash includes an array of programming constructs for scripting:

-   Conditional statements (`if`, `then`, `else`, `elif`, `fi`)\
-   Looping statements (`for`, `while`, `until`)

**Interactive Command Line Editing**

Bash provides an interactive command line editing environment where users can navigate and edit commands directly on the command line using Emacs or Vi editing modes.

**History expansion**

Commands can be re-executed by recalling them from the history

**Tab Completion**

Bash supports tab completion for command names, file names, and even command arguments, speeding up the input process and reducing typos

**Comprehensive Job Control**

-   Backgrounding (`&`), foregrounding (`fg`), and job management (`jobs`, `bg`)\
-   Stopping (suspending) processes and continuing them with `kill` and `kill -CONT`

**Aliases**

Users can create shorter commands to represent longer sequences of commands using aliases

**Shell Functions**

Bash also supports more powerful functions that can take arguments like small scripts.

**Script Debugging**

Bash scripts can be debugged using options like `set -x` to print commands and their arguments as they are executed, which is invaluable for troubleshooting scripts

**Environment Control**

-   Environment variables configuration and management
-   Variables are exported to make them available to sub-processes

**Expansion Capabilities**

Bash supports several types of expansions that enhance its scripting capabilities:

-   Brace expansion: `{a,b,c}`
-   Tilde expansion: `~` translates to the home directory.
-   Parameter and variable expansion: `$name` or `${name}`
-   Arithmetic expansion: `$(( expression )0`

**History Features**

Bash maintains a history of commands that users have executed, which can be navigated, searched, and reused. It also supports configuring the history size and behavior through various environment variables like `HISTSIZE` and `HISTFILESIZE`.


## ![](img/zshell-logo.png){fig-align="right" width="12%"} [Zsh]{style="font-weight: bold;"}

[**Zsh (Z Shell or 'Oh My ZSH!')**](https://ohmyz.sh/) is noted for its interactive features and is often used with customization frameworks. Zsh is a powerful command-line interpreter for Linux systems that serves as both a scriptable shell and an interactive command interpreter.[^sh_term-2]

[^sh_term-2]: Zsh is an [extended version](https://en.wikipedia.org/wiki/Z_shell) of **Bash (Bourne Again SHell)**, with many improvements, and is fully compatible with the Bourne Shell.


### Key features

**Command Line Editing**

Zsh provides an advanced and customizable command-line editing environment. Users can configure key bindings and have extensive control over the text editing capabilities directly within the command prompt.

**Tab Completion**

Zsh has one of the most powerful tab completion systems. It supports:

-   Completion for command options and arguments.
-   Automatic listing of options when a tab is hit twice.
-   Context-sensitive completion that can recognize patterns in filenames, history, running processes, hostnames, and more.

**Themes and Prompts**

Zsh allows extensive customization of its prompt, supporting themes that can completely change the look of your command line. The prompt can include colors, content from shell variables, functions, and command outputs.

**Scripting**

Zsh scripting is robust, with features like arrays, associative arrays, and floating-point arithmetic which are not typically available in all shells. It enhances scripting capabilities and improves on the scripting syntax of the Bourne Shell.

**Loadable Modules**: Zsh supports dynamically loadable modules, expanding its capabilities with features like:

-   FTP client
-   TCP and UDP socket operations
-   Advanced math functions
-   Full-fledged regular expression matching

**Improved Variable Handling**

Variable handling in Zsh includes several enhancements like:

-   Better array handling
-   Associative arrays (similar to dictionaries in higher-level programming languages)
-   Easier string manipulation and pattern matching

**Spell Check and Correction**

Zsh can be configured to correct commands automatically if misspelled and to suggest corrections or alternatives. This feature helps in reducing syntax errors and improves user efficiency.

**Extended Globbing**

Zsh's file globbing allows for more complex pattern matching than traditional Linux shells. You can specify patterns in a more expressive and powerful way, which is particularly useful in scripts.

## ![](img/fish-logo.png){fig-align="right" width="12%"} [Fish]{style="font-weight: bold;"}

[**Fish, or the Friendly Interactive SHell**](https://fishshell.com/), is a smart and user-friendly command line shell for Linux-like operating systems. It's designed to be more interactive and user-friendly than traditional shells like Bash or Zsh.[^sh_term-3]

[^sh_term-3]: Ars Technica has a great [summary](https://arstechnica.com/information-technology/2005/12/linux-20051218/) comparing Fish to other shells.


### Key features 

**Autosuggestions**

Fish suggests commands as you type based on history and completions, just like a web browser. This feature allows users to see and reuse previous commands by simply pressing the right arrow key to complete the suggested command, which can significantly speed up typing and reduce errors.

**Syntax Highlighting**

One of Fish's most noticeable features is its real-time syntax highlighting. Commands that are valid change color as you type them. It also helps users catch errors before the command is executed, such as highlighting misspelled commands or incorrect paths in red.

**Web-Based Configuration**

Fish includes a web-based configuration interface (accessible via the `fish_config` command), which makes customizing the shell settings and prompt easier for users who prefer a graphical interface over editing configuration files manually (or if you're new to the command line).

**Enhanced Tab Completion**

Fish provides intelligent tab completions for commands, file names, variables, and user-defined functions. It not only completes based on the prefix but also considers the whole line context, making the completions more relevant.

**Improved Variables and Scoping**

Fish simplifies variable management, including universal variables that are automatically shared between all running shells and persist across restarts without needing explicit saving to a file. Variable scoping is also more straightforward, helping avoid common bugs seen in other shells.

**Function Autoloads**

Fish allows functions to be defined in individual files and automatically loads them only when needed. This lazy-loading of functions helps speed up the start time of the shell.

**Extensible**

Fish is designed to be easily extensible through plugins. The Fisherman and Oh My Fish frameworks offer many plugins and themes designed to enhance Fish's capabilities or customize its appearance.

**Man Page Completions**

Fish generates command completions automatically from `man` pages, which means it often supports completions for all the installed commands without needing special configuration.

**No Configuration Needed**

Fish is designed to work properly out of the box, without needing to configure it extensively. This makes it very accessible for new users or those who want a powerful shell without the need to customize or configure it heavily.

**User-Friendly Scripts**

Fish uses a syntax that is slightly different from the traditional POSIX shell syntax, which is often simpler and easier to understand. For example, loops and conditionals are clearer, and there is no need for explicit subshell management.

## [Customizations]{style="font-weight: bold;"} 

Customizing the shell environment can significantly enhance your productivity by tailoring it to your specific needs and preferences. The next sections cover the basics of Bash, Zsh, and Fish customization. 

### Prompts {#sec-shell-prompts}

![](img/bash-logo.svg){fig-align="right" width="10%"} [Bash]{style="font-size: 1.05em;"}

Bash offers a wide range of customization options through the `.bash_profile` file, which is sourced every time a new terminal session is started.

The `PS1` variable defines the appearance of your command prompt. Use `export PS1=` to customize the prompt in the `~/.bash_profile` file:[^prompt-vars]

:::{layout="[50,50]" layout-valign="bottom"}



:::

:::{layout="[50,50]" layout-valign="bottom"}

``` sh
# in ~/.bash_profile
export PS1="Bash@MacBook \W\$ "
```

``` sh
# prompt
Bash@MacBook ~$ 
```

:::

[^prompt-vars]: `\W` prints the basename of the current working directory. You can also specify the username (`\u`) and the host name up to the first period (`\h`).

This command customizes the prompt to show the username in green, the hostname, and the current working directory in blue, followed by a dollar sign.

```sh
PS1="\[\e[32m\]\u@\h \[\e[34m\]\w\[\e[0m\] \$ "
```

![](img/zshell-logo.png){fig-align="right" width="10%"} [Zsh]{style="font-size: 1.05em;"}

Customizations in Zsh are typically done through the `.zshrc` file.

Zsh's `PROMPT` variable is similar to Bash's `PS1`, but with more advanced capabilities.

```zsh
PROMPT='%F{green}%n@%m %F{blue}%~ %f%# '
```

This prompt shows the username in green, the hostname, and the current directory in blue, followed by a prompt character.

![](img/fish-logo.png){fig-align="right" width="10%"} [Fish]{style="font-size: 1.05em;"}

Fish customizations are generally done through the `config.fish` file, typically located in `~/.config/fish/`. Fish makes it easy to customize the prompt using the `fish_prompt` function.

  
```sh
function fish_prompt
    set_color green
    echo -n (whoami) "@" (hostname) " "
    set_color blue
    echo -n (prompt_pwd)
    set_color normal
    echo -n "> "
end
```

This prompt shows the username in green, the hostname, and the current working directory in blue, followed by a `>` symbol.

### Aliases {#sec-shell-aliases}

Aliases allow you to create shortcuts for commonly used commands.

![](img/bash-logo.svg){fig-align="right" width="10%"} [Bash]{style="font-size: 1.05em;"} 

**Bash aliases**: These aliases simplify the `ls -la` command to `ll` and `git status` to `gs`.
  
```sh
alias ll='ls -la --color=auto'
alias gs='git status'
```

![](img/zshell-logo.png){fig-align="right" width="10%"} [Zsh]{style="font-size: 1.05em;"} 

**Zsh Aliases**: Zsh supports aliases in a similar manner to Bash.

```sh
alias ll='ls -lh'
```

![](img/fish-logo.png){fig-align="right" width="10%"} [Fish]{style="font-size: 1.05em;"} 

**Aliases**: Fish uses the `alias` command similar to Bash and Zsh.

```sh
alias ll="ls -la"
```

### Functions

![](img/bash-logo.svg){fig-align="right" width="10%"} [Bash]{style="font-size: 1.05em;"} 

**Bash Functions**: Bash functions allow you to create reusable scripts within your shell environment.

  
```sh
function mkcd() {
    mkdir -p "$1" && cd "$1";
}
```

The `mkcd` function creates a directory and then navigates into it.

![](img/zshell-logo.png){fig-align="right" width="10%"} [Zsh]{style="font-size: 1.05em;"} 

**Zsh Functions**: Zsh supports functions in a similar manner to Bash.

```sh
function extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar e $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
```

![](img/fish-logo.png){fig-align="right" width="10%"} [Fish]{style="font-size: 1.05em;"} 

**Fish Functions**: In Fish, functions are first-class citizens and are easy to define.

```sh
function mkcd
    mkdir -p $argv; and cd $argv
end
```

### Advanced 

Below we cover some advanced customizations.

![](img/bash-logo.svg){fig-align="right" width="10%"} [Bash]{style="font-size: 1.05em;"} 

**Bash Completion**

Enhance command-line efficiency by enabling tab completion for various commands.

```sh
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi
```

![](img/zshell-logo.png){fig-align="right" width="10%"} [Zsh]{style="font-size: 1.05em;"}

**Oh My Zsh**

A popular framework for managing Zsh configuration, making it easy to apply themes and plugins.

```sh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
```

Once installed, you can easily switch themes by editing the `ZSH_THEME` variable in your `.zshrc` file.

```sh
ZSH_THEME="agnoster"
```

**Zsh Completions and Plugins**

Zsh offers extensive tab-completion support and a variety of plugins that can be enabled for additional functionality.

```sh
plugins=(git docker kubectl)
```

![](img/fish-logo.png){fig-align="right" width="10%"} [Fish]{style="font-size: 1.05em;"}

**Universal Variables**

Fish supports universal variables that persist across sessions and are shared among all Fish instances.

  
```sh
set -U fish_greeting "Welcome to Fish Shell"
```

**Plugins and Themes**

Fish has a growing ecosystem of plugins and themes, often managed by the `fisher` plugin manager.

```sh
curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
fisher install oh-my-fish/theme-bobthefish
```

```{r}
#| label: co_box_zsh_prompt
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  look = "default", 
  hsize = "1.15", 
  size = "1.00", 
  header = "Changing prompts in Zsh", 
  fold = TRUE,
  contents = "

1. Open your `.zshrc` file in your home directory with a text editor.

    \`\`\` sh
    ~/.zshrc
    \`\`\`

2. Add or change the line that defines `PROMPT`. For example:

    \`\`\` sh
    export PROMPT=\"Zsh@MacBook %1~%% \"
    \`\`\`

This sets a prompt similar to Bash's example above.

\`\`\` sh
Zsh@MacBook ~% 
\`\`\`

3. Save the file and apply the changes by sourcing the profile:

    \`\`\` sh
    source ~/.zshrc
    \`\`\`

")

```


## [Recap]{style="font-size: 1.05em; font-weight: bold;"}

In summary, the shell is the command interpreter that executes the commands, calls other programs (when necessary), and returns the output for the user.