{
  "hash": "a6120fd685f83ec41697b921f261498c",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n\n\n\n# Set-Up {.unnumbered}\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nThis section of the book dives into the practical aspects of preparing your environment to work with Unix/Linux systems. It is designed to guide readers through various setup processes, catering to different preferences and requirements. Whether you're using Quarto for document creation, working directly on a macOS terminal, or setting up a virtual machine, this section has you covered. Below is an overview of what to expect in each subsection:\n\n##  Quarto \n\n is an '*open-source scientific and technical publishing system*' that enables users to create dynamic and beautiful documents, reports, presentations, and dashboards. \n\n[Quarto](https://quarto.org/) is an '*open-source scientific and technical publishing system*' built on [Pandoc.](https://pandoc.org/) It is particularly useful for those looking to combine Unix/Linux command line operations with document creation, offering a way to embed executable code within documents. The next sections will guide you through writing YAML headers and Bash code chunks, two essential components when working with Quarto in a Unix/Linux context.\n\n\n\n\n\n\n\n:::: {.callout-note collapse='true' appearance='default' icon=false}\n\n## [Literate Programming]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.0em; color: #282b2d;'}\n\n\n\n> '*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*' - [Donald Knuth. Literate Programming (1984) in Literate Programming. CSLI, 1992, pg. 99.](http://www.literateprogramming.com/index.html)\n\n::: \n\n::::\n\n\n\n\n\n\n\n\n### YAML header\n\nThis part will explain the syntax and options available within the `YAML` header, showing how to configure document properties such as title, engine, output format, and more. It serves as the foundation for controlling how your Quarto document behaves and appears.\n\n@sec-quarto documents are written in markdown and can include executable code in various programming languages, including Unix commands. @sec-yaml is a lightweight markup language thatâ€™s easy to write and read. The `YAML` header is placed between three dashes `---` at the top of each Quarto document to specify metadata and global options. \n\nTo run Bash commands, specify `knitr` in the `engine` field of in the YAML header of the `.qmd` file, and any additional key-value pairs:[^shell-reference]\n\n```yaml\n---\ntitle: \"Using Bash\"\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n```\n\n[^shell-reference]: Read more about configuring shell code blocks in Quarto in the [documentation.](https://quarto.org/docs/computations/execution-options.html#shell-commands)\n\nThis simplicity allows authors to focus on their content rather than formatting. \n\n### Bash Code Chunks\n\nIntroduced in 1989, Bash has become the default command-line interface or \"shell\" for most Linux distributions.[^bash-macos] We'll use Bash commands and scripts to preproceess data files, render Quarto documents, and automate other operations in the data analysis pipeline, from downloading and ingesting data to creating and deploying analysis outputs.  \n\n[^bash-macos]: Bash was the default command-line interface for Apple's macOS (which is Unix-based) until the transition to `zsh` as the default shell in macOS Catalina.\n\nOne of the powerful features of Quarto is the ability to integrate executable code chunks into Markdown documents.[^quarto-bash-book] You can create bash code chunks using the following syntax:\n\n```{{bash}}\necho \"foo\" \n```\n\n[^quarto-bash-book]: In fact, this entire book was created using Quarto and executable code chunks!\n\nBash code chunks allow you to include executable Bash commands within your Quarto documents. You can also specify the code chunk options with the hash-pipe (`#|`):[^quarto-chunk-opts] \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"show/hide echo\"}\necho \"foo\"\n## foo\n```\n:::\n\n\n\n\n\n```{{bash}}\n#| code-fold: show\n#| code-summary: 'show/hide echo'\necho \"foo\" \n```\n\n[^quarto-chunk-opts]: Consult the full list of code chunk options in the [Quarto documentation](https://quarto.org/docs/reference/cells/cells-knitr.html). \n\n## Terminal (macOS)\n\nThe terminal application in macOS is a gateway to the Unix command line, providing users with direct access to Unix/Linux commands and utilities. This subsection focuses on setting up and customizing the terminal in macOS, covering basic configurations, installing essential software, and introducing useful shortcuts and commands. It aims to equip macOS users with the knowledge needed to effectively utilize the terminal for Unix/Linux operations.\n\n## Virtual Machines\n\nVirtual machines (VMs) offer a flexible way to run Unix/Linux environments on top of your existing operating system, regardless of whether it's Windows, macOS, or another Linux distribution. This subsection explores the setup process for virtual machines, highlighting popular VM software like VirtualBox and VMware. It will guide readers through creating a new VM, installing a Unix/Linux distribution, configuring network settings, and optimizing performance. This part is essential for those looking to experiment with Unix/Linux systems in an isolated environment.\n\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}