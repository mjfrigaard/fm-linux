{
  "hash": "339144e52d0e6e07de1fcd38746889e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '# '\n---\n\n\n\n\n\n# Syntax {.unnumbered}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nIn Unix-like operating systems, the terms commands, arguments, and options refer to the components of the syntax you type into the terminal:\n\n## Commands\n\nCommands are the first part of a command line instruction, specifying the program or built-in functionality to be executed, such as <code>@sec-ls</code> for listing directory contents or <code>@sec-grep</code> for pattern searching.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls /\n#  Applications\n#  Library\n#  System\n#  Users\n#  Volumes\n#  bin\n#  cores\n#  dev\n#  etc\n#  home\n#  opt\n#  private\n#  sbin\n#  tmp\n#  usr\n#  var\n```\n:::\n\n\n\n\n\n## Arguments\n\nArguments follow the command and provide additional information or specify targets for the command, such as file names and paths. For example, in <code>@sec-cat</code> `data/myfile.txt`, the `data/myfile.txt` file path is an argument to the <code>@sec-cat</code> command, specifying which file it should display.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/myfile.txt\n#  This is my file.\n```\n:::\n\n\n\n\n\n\n## Options\n\n**Options** (sometimes called flags) modify how a command operates, allowing for more control over its behavior. Options often start with one or two dashes (`-` or `--`). For example, in `ls -l`, the `-l` option tells `ls` to use a long listing format.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l /\n#  total 10\n#  drwxrwxr-x  59 root  admin  1888 Apr  5 14:42 Applications\n#  drwxr-xr-x  73 root  wheel  2336 Apr  2 11:16 Library\n#  drwxr-xr-x@ 10 root  wheel   320 Mar 20 23:13 System\n#  drwxr-xr-x   5 root  admin   160 Apr  2 11:13 Users\n#  drwxr-xr-x   3 root  wheel    96 Apr  5 14:39 Volumes\n#  drwxr-xr-x@ 39 root  wheel  1248 Mar 20 23:13 bin\n#  drwxr-xr-x   2 root  wheel    64 Mar  3  2021 cores\n#  dr-xr-xr-x   3 root  wheel  4698 Apr  5 14:39 dev\n#  lrwxr-xr-x@  1 root  wheel    11 Mar 20 23:13 etc -> private/etc\n#  lrwxr-xr-x   1 root  wheel    25 Apr  5 14:39 home -> /System/Volumes/Data/home\n#  drwxr-xr-x   4 root  wheel   128 Sep 25  2023 opt\n#  drwxr-xr-x   6 root  wheel   192 Apr  5 14:39 private\n#  drwxr-xr-x@ 64 root  wheel  2048 Mar 20 23:13 sbin\n#  lrwxr-xr-x@  1 root  wheel    11 Mar 20 23:13 tmp -> private/tmp\n#  drwxr-xr-x@ 11 root  wheel   352 Mar 20 23:13 usr\n#  lrwxr-xr-x@  1 root  wheel    11 Mar 20 23:13 var -> private/var\n```\n:::\n\n\n\n\n\nIn summary, commands tell the system what action to perform, arguments specify on what or whom the action is performed, and options modify how the action is performed.\n\n***\n\n## Input\n\n**Input** generally refers to the data fed into a command, which can come from `stdin` or be specified as arguments.\n\n\n\n\n\n\n:::: {.callout-tip collapse='false' appearance='default' icon=false}\n\n## [Standard Input (`stdin`)]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\n\n\n`stdin` (standard input) is a stream from which a command reads its input. By default, it's the keyboard, but it can be redirected to read from a file or another command's output.\n\n\n::: \n\n::::\n\n\n\n\n\n## Output\n\n**Output** is the data produced by a command, displayed on `stdout` unless redirected.\n\n\n\n\n\n\n:::: {.callout-tip collapse='false' appearance='default' icon=false}\n\n## [Standard Output (`stdout`)]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\n\n\n`stdout` (standard output) is a stream where a command writes its output. Typically, this is the terminal screen, but it can be redirected to a file or another command's input.\n\n\n::: \n\n::::\n\n\n\n\n\n\n## Pipes\n\nPipes (`|`) allow the output of one command (`stdout`) to be used as the input (`stdin`) to another, enabling the chaining of commands to perform complex tasks with the output of one serving as the input for the next.\n\nWe'll use the <code>@sec-grep</code> command as an example to illustrate `stdin`. \n\nImagine you want to find the word \"dress\" in a file named `roxanne` in the `data/` folder. Instead of directly providing the file as an argument to <code>@sec-grep</code>, you can use <code>@sec-cat</code> to read the file and then pipe (`|`) its output into <code>@sec-grep</code>, utilizing `stdin` to receive the file content.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/roxanne | grep dress\n#  You don't have to wear that dress tonight\n```\n:::\n\n\n\n\n\nIn this command:\n\n1. `cat data/roxanne` reads the content of `roxanne` and *sends* it to `stdout`\n\n2. The pipe `|` *redirects* the `stdout` from <code>@sec-cat</code> to the `stdin` of <code>@sec-grep</code>.\n\n3. `grep dress` *receives* the file's content through `stdin`, searches for the word \"dress\", and *prints* lines containing it to `stdout`.\n\nHere, <code>@sec-grep</code>'s input comes from `stdin` (provided by the pipe) instead of directly reading from a file.\n\n## Recap\n\nThis framework of commands, arguments, options, and the interplay of input (`stdin`), output (`stdout`) , and pipes enables sophisticated data processing and manipulation directly from the terminal.\n\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}