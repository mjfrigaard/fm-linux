{
  "hash": "0f60e1a7a1cd5090a3952763668d1d47",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n    \n---\n\n\n\n\n\n# Format {#sec-format-sh}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Create and populate the file with your data\ntouch who_tb_data.txt\necho \"country year  type  count\nAfghanistan 1999  cases 745\nAfghanistan 1999  population  19987071\nAfghanistan 2000  cases 2666\nAfghanistan 2000  population  20595360\nBrazil  1999  cases 37737\nBrazil  1999  population  172006362\nBrazil  2000  cases 80488\nBrazil  2000  population  174504898\nChina 1999  cases 212258\nChina 1999  population  1272915272\nChina 2000  cases 213766\nChina 2000  population  1280428583\" > who_tb_data.txt\n\n# Get the word count values\ncounts=$(wc who_tb_data.txt | awk '{print $1, $2, $3}')\n\n# Use printf to format the output\nprintf \"   lines   words characters\\n\"\nprintf \"%8s %7s %10s\\n\" $counts\n```\n:::\n\n\n\n\n\nTo make the commands above more generalizable so that any file can be passed as input rather than being restricted to a specific file (`who_tb_data.txt`), we can modify the script to take a filename as a command-line argument. \n\nThis way, you can use the script with any file by specifying the filename when you run the script.\n\n### Step 1: Modify the Script to Take Command-Line Arguments\n\nHere's how the revised script could look:\n\n```bash\n#!/bin/bash\n\n# Check if a file name was provided as an argument\nif [ \"$#\" -ne 1 ]; then\n    echo \"Usage: $0 <filename>\"\n    exit 1\nfi\n\n# Check if the file exists\nif [ ! -f \"$1\" ]; then\n    echo \"File not found: $1\"\n    exit 1\nfi\n\n# Get the word count values\ncounts=$(wc \"$1\" | awk '{print $1, $2, $3}')\n\n# Use printf to format the output\nprintf \"   lines   words characters\\n\"\nprintf \"%8s %7s %10s\\n\" $counts\n```\n\n### Step 2: Save and Make the Script Executable\n\n1. Save the script in a file, for example, `format_wc_output.sh`.\n2. Make sure the script is executable:\n   ```bash\n   chmod +x format_wc_output.sh\n   ```\n\n### Step 3: Run the Script with a File as an Argument\n\n- Now you can run the script with any file as an argument. For example:\n  ```bash\n  ./format_wc_output.sh somefile.txt\n  ```\n\n### Explanation \n\n1. **Argument Checking**: The script now starts by checking if exactly one argument (the filename) is provided. If not, it prints a usage message and exits. This ensures the user knows how to run the script correctly.\n   \n2. **File Existence Checking**: It checks if the file exists before attempting to process it. If the file doesn't exist, it prints an error message and exits. This prevents errors related to non-existent files.\n\n3. **Using Command-Line Argument**: The `wc` command now uses `$1`, which is a placeholder for the first command-line argument provided to the script (i.e., the filename you want to process).\n\nThis version of the script is more flexible and useful, as it can handle any file input, making it a handy tool for quickly formatting word count output for various files across your system.\n\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}