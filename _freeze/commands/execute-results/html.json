{
  "hash": "e5caa406d3dd737d8c384a9308a8f5c8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '# '\n---\n\n\n\n\n\n# Commands {#sec-commands}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nCommands are the first part of a command line instruction, specifying the program or built-in functionality to be executed. We're going to start with a basic command: `whoami`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n#  mjfrigaard\n```\n:::\n\n\n\n\n\nThe command `whoami` returns a value for the currently logged-in user. What we've just done is referred to as the [read–eval–print loop](https://www.computerhope.com/jargon/r/repl.htm), or REPL, and it's the underlying process of the command-line. Here is how it works: \n\n## REPL\n\n1. **read** the command you've typed into the code chunk and create a data structure for it  \n\n2. **eval**uate what the command means and perform the associated operation (in our case, retrieving the value of the currently logged-in user) \n\n3. **print** the value from **eval** results to the screen so we can see it \n\nA great follow-up question is *where am I?*, but for this we'll use `pwd`, which stands for 'print working directory.'\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n#  /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\nAbove we can see I am logged in as `/Users/mjfrigaard` and I'm currently accessing the `projects/books/fm-unix` directory. \n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}