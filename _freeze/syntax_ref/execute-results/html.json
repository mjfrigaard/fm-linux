{
  "hash": "e7678dca49167aed0b4ed927e73e5112",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n---\n\n\n\n\n\n# Syntax Reference {#sec-syn-ref}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\n## Basic Commands\n\n### `who` {#sec-who}\n\n`who` shows who is logged on the system. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwho\n#>  username       console      Apr  9 03:20 \n#>  username       ttys000      Apr  9 03:42\n```\n:::\n\n\n\n\n\n`who` by itself, without options or arguments, lists the users currently logged into the system.\n\n### `whoami` {#sec-whoami}\n\n`whoami` shows the username of the user currently logged into the system. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n#> username\n```\n:::\n\n\n\n\n\n### `hostname` {#sec-hostname}\n\n`hostname` displays the system's network name.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhostname\n#>  Users-MacBook-Pro-2.local\n```\n:::\n\n\n\n\n\n### `date` {#sec-date}\n\n`date` displays the current date and time. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndate\n#>  Wed Apr 10 03:39:52 MST 2024\n```\n:::\n\n\n\n\n\n### `cal` {#sec-cal}\n\n`cal` displays a calender of the current month.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncal\n#>      April 2024       \n#> Su Mo Tu We Th Fr Sa  \n#>     1  2  3  4  5  6  \n#>  7  8  9 10 11 12 13  \n#> 14 15 16 17 18 19 20  \n#> 21 22 23 24 25 26 27  \n#> 28 29 30    \n```\n:::\n\n\n\n\n\n### `uptime` {#sec-uptime}\n\n`uptime` shows how long the system has been running.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nuptime\n#>  3:39  up 11:23, 2 users, load averages: 3.82 3.21 3.00\n```\n:::\n\n\n\n\n\n### `clear` {#sec-clear}\n\n`clear` clears the terminal screen and doesnâ€™t print any return values.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nclear\n```\n:::\n\n\n\n\n\n`clear` does its job without the need for additional input.\n\n### `exit` {#sec-exit}\n\n`exit` exits the shell or your current session. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nexit\n```\n:::\n\n\n\n\n\n`exit` requires no arguments or options to execute this action, and doesn't print any return values.\n\n## Navigate \n\n### `pwd` {#sec-pwd}\n\n**`pwd` (Print Working Directory)** tells you exactly where you are in the filesystem.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd # where am I?\n#> /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\n### `cd` {#sec-cd}\n\n **`cd` (Change Directory)** lets you move to a different folder on your computer.\n\nIf you want to move from the one place to another, `cd` can get you there. For example, `cd /bin` takes you to the `/bin` folder, the toolshed of software tools.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\npwd # now where am I?\n#> /bin\n```\n:::\n\n\n\n\n\n### `ls` {#sec-ls}\n\n**`ls` (List)** is like standing in one location, looking around, and seeing what files and folders are around you. In `/bin`, `ls` would show you the software tools available:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\nls # what's in here?\n#> [\n#> bash\n#> cat\n#> chmod\n#> cp\n#> csh\n#> dash\n#> date\n#> dd\n#> df\n#> echo\n#> ed\n#> expr\n#> hostname\n#> kill\n#> ksh\n#> launchctl\n#> link\n#> ln\n#> ls\n#> mkdir\n#> mv\n#> pax\n#> ps\n#> pwd\n#> realpath\n#> rm\n#> rmdir\n#> sh\n#> sleep\n#> stty\n#> sync\n#> tcsh\n#> test\n#> unlink\n#> wait4path\n#> zsh\n```\n:::\n\n\n\n\n\n### `locate` {#sec-locate}\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlocate bin\n```\n:::\n\n\n\n\n\n## Manage \n\nIn the Unix/Linux world, file and directory management is a fundamental skill. This chapter dives deep into the commands that allow users to create, copy, move, remove, and link files and directories. Each section below introduces a different command, detailing its purpose and providing examples of its use.\n\n### `mkdir` {#sec-mkdir}\n\n**`mkdir` (Make Directory)** builds a new folder wherever you tell it to, like making a new folder in our project for outputs (`out/`) or documents (`doc/`).\n\n```bash\nmkdir out\nmkdir doc\n```\n\n### `cp` {#sec-cp}\n\n**`cp` (Copy)** duplicates files or folders. The `cp` command is used to Copy files or directories from one location to another. Imagine having a file (`myfile.txt`) on your root (`.`) directory that you want to copy to the `/data` folder; you could use `cp` to make a duplicate. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile.txt data/myfile.txt\n# confirm copy\nls data\n#> ajperlis_epigrams.txt\n#> music_vids.tsv\n#> myfile.txt\n#> roxanne.txt\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> who_tb_data.txt\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n### `mv` {#sec-mv}\n\n**`mv` (Move)**: `mv`, short for Move, functions similarly to picking up a book from your desk and placing it on a shelf. It moves files or directories from one location to another. It can also be used for renaming files. This command is especially useful for organizing files and directories that are in the wrong place.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# create folder\nmkdir doc\n# move file\nmv data/myfile.txt doc/myfile.txt \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# confirm move\nls doc\n#> myfile.txt\n```\n:::\n\n\n\n\n\n### `rm` {#sec-rm}\n\n**`rm` (Remove)**: The `rm` command stands for **remove** and is used to delete files or directories.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# remove doc folder\nrm doc\n#> rm: doc: is a directory\n```\n:::\n\n\n\n\n\nBy default, it won't remove a directory without the `-R` or `-r` option.\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon=false}\n\n## [Warning]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\n\n\nIt's important to note here that the command-line is not very forgiving. Using `rm` is a powerful action with significant consequences, as it permanently deletes files, akin to shredding documents. There's usually no easy way to recover deleted files unless you have a backup.\n\n> '*Unix is like a chainsaw. Chainsaws are powerful tools, and make many difficult tasks like cutting through thick logs quite easy. Unfortunately, this power comes with danger: chainsaws can cut just as easily through your leg.*' - Gary Bernhardt[^bernhardt]\n\n[^bernhardt]: As quoted in [Bioinformatics Data Skills: Reproducible and Robust Research with Open Source Tools (2015) by Vince Buffalo](https://bit.ly/3sVBSne).\n\n\n\n::: \n\n::::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# add option \nrm -R doc\n```\n:::\n\n\n\n\n\n\n### `ln` {#sec-ln}\n\n**`ln` (Link)**: `ln` creates Links to files or directories, making them accessible from multiple locations without duplicating the actual content. It's like creating a shortcut on your desktop to a program you frequently use. There are two types of links: hard links and symbolic (soft) links. Symbolic links are more commonly used because they can link to directories and provide more flexibility.\n\n```bash\nln -s /path/to/original /path/to/link\n```\n\n## System\n\n### `ps` {#sec-ps}\n\n`ps` (**Process Status**) reports a snapshot of information about all running processes, regardless of the owner, including the user, CPU and memory usage, process ID, and the command that started each process.. Command options can expand the selection to include other users' processes, full command lines, etc.\n\n### `df` {#sec-df}\n\n`df` (**Disk Free**) shows disk usage in a human-readable format, including the size, used space, available space, and the mount point of each filesystem. By default, it displays sizes in 1K blocks but can show them in a more readable format (like MB or GB) with the `-h` option (human-readable).\n\n## Files \n\n### `touch` {#sec-touch}\n\n**`touch`** creates a new empty file if the specified file does not exist. If the file does exist, `touch` updates its access and modification timestamps.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch newfile.txt\n```\n:::\n\n\n\n\n\n### View\n\n### `file` {#sec-file}\n\n**`file`** gives you a summary of what a computer file is or what it contains, like telling you if a tool in `/bin/pax` is a program you can run or a text file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfile /bin/pax\n#> /bin/pax: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\n#> /bin/pax (for architecture x86_64):\tMach-O 64-bit executable x86_64\n#> /bin/pax (for architecture arm64e):\tMach-O 64-bit executable arm64e\n```\n:::\n\n\n\n\n\n### `less` {#sec-less}\n\n**`less`** lets you skim through a file on your computer, moving forwards and backwards as you please.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless data/vg_hof.tsv\n```\n:::\n\n\n\n\n\n![Enter `less` in the Terminal to scroll](img/less.gif){width='100%' fig-align='center'}\n\n## Search\n\n### `find` {#sec-find}\n\n`find` is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, file type, and modification time. \n\n## Permissions & Priviledges \n\n### `chown` {#sec-chown}\n\n### `sudo` {#sec-sudo}\n\n## Documentation \n\n### `man` {#sec-man}\n\n`man` (**Manual**) displays the user manual of any command that we can run on the terminal. It's the go-to resource for learning about the options, arguments, and examples of how to use commands.\n\n### `help` {#sec-help}\n\n`help` or `--help` option provides information about built-in commands and usage guidelines. It's a quick way to get help for shell built-ins or to understand the basic usage of a command. \n\n## Text\n\n### `echo` {#sec-echo}\n\nThe `echo` command prints its arguments to the standard output. It's commonly used in scripts and on the command line to display messages or variables.\n\n### `cat` {#sec-cat}\n\n**`cat` (Concatenate)**: `cat` displays the content of files straight to your screen, useful for checking what's in a text file quickly.\n\nThis is similar to printing a file and laying out the pages on the floor to see them all at once.\n\n### `head` {#sec-head}\n\n**`head`** displays the first part of files, allowing you to see the beginning of a file. By default, it shows the first 10 lines.\n\n### `tail` {#sec-tail}\n\n**`tail`** displays the last part of files, useful for viewing the end of a file or for monitoring changes to a file in real time with `-f`.\n\n### `seq` {#sec-seq}\n\n**`seq`** is a simple utility used to generate a sequence of numbers, which can be very handy for scripting and looping operations. `seq` is often used to provide numeric input for loops or to create numbered lists in files.\n\n### `grep` {#sec-grep}\n\n**`grep`** stands for \"global regular expression print\" and it reads from `stdin` or a list of files and outputs the lines that contain matches for a specified pattern.\n\n### `sed` {#sec-sed}\n\n**`sed`** (Stream Editor) is a powerful utility in Unix and Linux systems designed for processing text in a stream, meaning it can filter and transform text in a pipeline. It's typically used to automate editing of large numbers of files and to modify files too large to open in a traditional text editor.\n\n### `awk` {#sec-awk}\n\n**`awk`** reads from a file or a stream, breaks up each line into fields, checks each line against patterns specified in the program, and then performs specified actions on matching lines.\n\n### `gsub` {#sec-gsub}\n\n**`gsub`** is not a standalone command but a function used within `awk`, `gsub` stands for \"global substitution\" and it is used to replace all occurrences of a specified pattern within each input record. It takes three arguments: the pattern to match, the replacement string, and the target string or field where the substitutions should be made. It operates on the entire line (or specified field) and replaces every occurrence of the pattern with the replacement.\n\n### `sort` {#sec-sort}\n\n**`sort`**: `sort` arranges the lines in a text file into order (similar to organizing our stack of papers alphabetically).\n\n### `uniq` {#sec-uniq}\n\n**`uniq`**: `uniq` helps by removing duplicate lines from a file, making sure every line is unique (i.e., you've accidentally printed duplicates of a document, and you remove the extra copies).\n\n### `cut` {#sec-cut}\n\n**`cut`**: `cut` extracts specific parts of lines in a file, like cutting out columns of text. The example below shows the names and log in times of the currently logged in users:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwho | cut -c 1-16,26-42\n#> mjfrigaard           Apr 12 15:33\n#> mjfrigaard           Apr 13 15:02\n#> mjfrigaard           Apr 12 15:33\n#> mjfrigaard           Apr 13 15:11\n```\n:::\n\n\n\n\n\n### `paste` {#sec-paste}\n\n**`paste`**: `paste` combines lines from multiple files side by side (like taking snippets of text from different documents and sticking them together into one).\n\n### `join` {#sec-join}\n\n**`join`**: `join` merges lines from two files based on a common field.\n\nIf you have two lists with common information, you might merge them based on what matches. \n### `comm` {#sec-comm}\n\n**`comm` (Compare)**: `comm` compares two sorted files line by line to see what items appear on both, only on one, or the other.\n\n### `diff` {#sec-diff}\n\n**`diff` (Difference)**: Highlighting what changes have been made between your draft and the final copy of a letter, `diff` shows the differences between two files.\n\n### `wc` {#sec-wc}\n\n`wc` (**word count**) counts the number of lines, words, and characters in the given input. If a file name is provided, it performs the count on the file; otherwise, it reads from the standard input.\n\n### `xargs` {#sec-xargs}\n\n`xargs` builds and executes command lines from standard input (`stdin`). It's most often used in combination with other commands through pipes. `xargs` takes input from a pipe and passes it as arguments to another command, allowing for powerful command-line operations that process a list of inputs iteratively.\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}