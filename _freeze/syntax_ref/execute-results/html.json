{
  "hash": "1e7cb864e861d8eb683f072d0af93c46",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n---\n\n\n\n\n\n# Syntax Reference {#sec-syn-ref}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\n## Basic Commands\n\n### `who` {#sec-who}\n\n`who` shows who is logged on the system. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwho\n#>  username       console      Apr  9 03:20 \n#>  username       ttys000      Apr  9 03:42\n```\n:::\n\n\n\n\n\n`who` by itself, without options or arguments, lists the users currently logged into the system.\n\n### `whoami` {#sec-whoami}\n\n`whoami` shows the username of the user currently logged into the system. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n#> username\n```\n:::\n\n\n\n\n\n### `hostname` {#sec-hostname}\n\n`hostname` displays the system's network name.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhostname\n#>  Users-MacBook-Pro-2.local\n```\n:::\n\n\n\n\n\n### `date` {#sec-date}\n\n`date` displays the current date and time. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndate\n#>  Wed Apr 10 03:39:52 MST 2024\n```\n:::\n\n\n\n\n\n### `cal` {#sec-cal}\n\n`cal` displays a calender of the current month.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncal\n#>      April 2024       \n#> Su Mo Tu We Th Fr Sa  \n#>     1  2  3  4  5  6  \n#>  7  8  9 10 11 12 13  \n#> 14 15 16 17 18 19 20  \n#> 21 22 23 24 25 26 27  \n#> 28 29 30    \n```\n:::\n\n\n\n\n\n### `uptime` {#sec-uptime}\n\n`uptime` shows how long the system has been running.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nuptime\n#>  3:39  up 11:23, 2 users, load averages: 3.82 3.21 3.00\n```\n:::\n\n\n\n\n\n### `clear` {#sec-clear}\n\n`clear` clears the terminal screen and doesnâ€™t print any return values.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nclear\n```\n:::\n\n\n\n\n\n`clear` does its job without the need for additional input.\n\n### `exit` {#sec-exit}\n\n`exit` exits the shell or your current session. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nexit\n```\n:::\n\n\n\n\n\n`exit` requires no arguments or options to execute this action, and doesn't print any return values.\n\n## Directories \n\n## Navigate {#sec-nav-dirs}\n\n### `pwd` {#sec-pwd}\n\n**`pwd` (Print Working Directory)** tells you exactly where you are in the filesystem.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd # where am I?\n#> /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\n### `cd` {#sec-cd}\n\n **`cd` (Change Directory)** lets you move to a different folder on your computer.\n\nIf you want to move from the one place to another, `cd` can get you there. For example, `cd /bin` takes you to the `/bin` folder, the toolshed of software tools.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\npwd # now where am I?\n#> /bin\n```\n:::\n\n\n\n\n\n### `ls` {#sec-ls}\n\n**`ls` (List)** is like standing in one location, looking around, and seeing what files and folders are around you. In `/bin`, `ls` would show you the software tools available:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\nls # what's in here?\n#> [\n#> bash\n#> cat\n#> chmod\n#> cp\n#> csh\n#> dash\n#> date\n#> dd\n#> df\n#> echo\n#> ed\n#> expr\n#> hostname\n#> kill\n#> ksh\n#> launchctl\n#> link\n#> ln\n#> ls\n#> mkdir\n#> mv\n#> pax\n#> ps\n#> pwd\n#> realpath\n#> rm\n#> rmdir\n#> sh\n#> sleep\n#> stty\n#> sync\n#> tcsh\n#> test\n#> unlink\n#> wait4path\n#> zsh\n```\n:::\n\n\n\n\n\n## Manage {#sec-manage-dirs}\n\nIn the Unix/Linux world, file and directory management is a fundamental skill. This chapter dives deep into the commands that allow users to create, copy, move, remove, and link files and directories. Each section below introduces a different command, detailing its purpose and providing examples of its use.\n\n### `mkdir` {#sec-mkdir}\n\n**`mkdir` (Make Directory)** builds a new folder wherever you tell it to, like making a new folder in our project for outputs (`out/`) or documents (`doc/`).\n\n```bash\nmkdir out\nmkdir doc\n```\n\n### `cp` {#sec-cp}\n\n**`cp` (Copy)** duplicates files or folders. The `cp` command is used to Copy files or directories from one location to another. Imagine having a file (`myfile.txt`) on your root (`.`) directory that you want to copy to the `/data` folder; you could use `cp` to make a duplicate. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile.txt data/myfile.txt\n# confirm copy\nls data\n#> music_vids.tsv\n#> myfile.txt\n#> roxanne\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n### `mv` {#sec-mv}\n\n**`mv` (Move)**: `mv`, short for Move, functions similarly to picking up a book from your desk and placing it on a shelf. It moves files or directories from one location to another. It can also be used for renaming files. This command is especially useful for organizing files and directories that are in the wrong place.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# create folder\nmkdir doc\n# move file\nmv data/myfile.txt doc/myfile.txt \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# confirm move\nls doc\n#> myfile.txt\n```\n:::\n\n\n\n\n\n### `rm` {#sec-rm}\n\n**`rm` (Remove)**: The `rm` command stands for **remove** and is used to delete files or directories.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# remove doc folder\nrm doc\n#> rm: doc: is a directory\n```\n:::\n\n\n\n\n\nBy default, it won't remove a directory without the `-R` or `-r` option.\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon=false}\n\n## [Warning]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\n\n\nIt's important to note here that the command-line is not very forgiving. Using `rm` is a powerful action with significant consequences, as it permanently deletes files, akin to shredding documents. There's usually no easy way to recover deleted files unless you have a backup.\n\n> '*Unix is like a chainsaw. Chainsaws are powerful tools, and make many difficult tasks like cutting through thick logs quite easy. Unfortunately, this power comes with danger: chainsaws can cut just as easily through your leg.*' - Gary Bernhardt[^bernhardt]\n\n[^bernhardt]: As quoted in [Bioinformatics Data Skills: Reproducible and Robust Research with Open Source Tools (2015) by Vince Buffalo](https://bit.ly/3sVBSne).\n\n\n\n::: \n\n::::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# add option \nrm -R doc\n```\n:::\n\n\n\n\n\n\n### `ln` {#sec-ln}\n\n**`ln` (Link)**: `ln` creates Links to files or directories, making them accessible from multiple locations without duplicating the actual content. It's like creating a shortcut on your desktop to a program you frequently use. There are two types of links: hard links and symbolic (soft) links. Symbolic links are more commonly used because they can link to directories and provide more flexibility.\n\n```bash\nln -s /path/to/original /path/to/link\n```\n\n## System\n\n\n### `ps` {#sec-ps}\n\n`ps` (**Process Status**) reports a snapshot of information about all running processes, regardless of the owner, including the user, CPU and memory usage, process ID, and the command that started each process.. Command options can expand the selection to include other users' processes, full command lines, etc.\n\n### `df` {#sec-df}\n\n`df` (**Disk Free**) shows disk usage in a human-readable format, including the size, used space, available space, and the mount point of each filesystem. By default, it displays sizes in 1K blocks but can show them in a more readable format (like MB or GB) with the `-h` option (human-readable).\n\n## Files \n\n### `file` {#sec-file}\n\n**`file`** gives you a summary of what a computer file is or what it contains, like telling you if a tool in `/bin/pax` is a program you can run or a text file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfile /bin/pax\n#> /bin/pax: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\n#> /bin/pax (for architecture x86_64):\tMach-O 64-bit executable x86_64\n#> /bin/pax (for architecture arm64e):\tMach-O 64-bit executable arm64e\n```\n:::\n\n\n\n\n\n### `less` {#sec-less}\n\n**`less`** lets you skim through a file on your computer, moving forwards and backwards as you please.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless data/vg_hof.tsv\n```\n:::\n\n\n\n\n\n![Enter `less` in the Terminal to scroll](img/less.gif){width='100%' fig-align='center'}\n\n### `find` {#sec-find}\n\n`find` is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, file type, and modification time. \n\n## Permissions & Priviledges \n\n### `chown` {#sec-chown}\n\n### `sudo` {#sec-sudo}\n\n## Documentation \n\n### `man` {#sec-man}\n\n`man` (**Manual**) displays the user manual of any command that we can run on the terminal. It's the go-to resource for learning about the options, arguments, and examples of how to use commands.\n\n### `help` {#sec-help}\n\n`help` or `--help` option provides information about built-in commands and usage guidelines. It's a quick way to get help for shell built-ins or to understand the basic usage of a command. \n\n## Text Manipulation \n\n### `echo` {#sec-echo}\n\nThe `echo` command prints its arguments to the standard output. It's commonly used in scripts and on the command line to display messages or variables.\n\n### `cat` {#sec-cat}\n\n**`cat` (Concatenate)**: `cat` displays the content of files straight to your screen, useful for checking what's in a text file quickly.\n\nThis is similar to printing a file and laying out the pages on the floor to see them all at once.\n\n### `grep` {#sec-grep}\n\n**`grep`** stands for \"global regular expression print\" and it reads from `stdin` or a list of files and outputs the lines that contain matches for a specified pattern.\n\n\n### `sort` {#sec-sort}\n\n**`sort`**: `sort` arranges the lines in a text file into order:\n\n\nSimilar to organizing our stack of papers alphabetically.\n\n### `uniq` {#sec-uniq}\n\n**`uniq`**: `uniq` helps by removing duplicate lines from a file, making sure every line is unique.\n\nAfter accidentally printing duplicates of a document, you remove the extra copies.\n\n### `cut` {#sec-cut}\n\n**`cut`**: `cut` extracts specific parts of lines in a file, like cutting out columns of text.\n\nIf you only want the dates from a list of events, you might physically cut them out of the paper. \n\n### `paste` \n\n**`paste`**: `paste` combines lines from multiple files side by side:\n\n`paste` is like taking snippets of text from different documents and sticking them together into one.\n\n### `join` {#sec-join}\n\n**`join`**: `join` merges lines from two files based on a common field.\n\n\nIf you have two lists with common information, you might merge them based on what matches. \n\n### `comm` {#sec-comm}\n\n**`comm` (Compare)**: `comm` compares two sorted files line by line to see what items appear on both, only on one, or the other.\n\n### `diff` {#sec-diff}\n\n**`diff` (Difference)**: Highlighting what changes have been made between your draft and the final copy of a letter, `diff` shows the differences between two files.\n\n### `wc` {#sec-wc}\n\n`wc` (**word count**) counts the number of lines, words, and characters in the given input. If a file name is provided, it performs the count on the file; otherwise, it reads from the standard input.\n\n### `xargs` {#sec-xargs}\n\n`xargs` builds and executes command lines from standard input (`stdin`). It's most often used in combination with other commands through pipes. `xargs` takes input from a pipe and passes it as arguments to another command, allowing for powerful command-line operations that process a list of inputs iteratively.\n\n## Special Characters\n\n**Special Characters**: Characters such as spaces, tabs, asterisks, question marks, and others have special meanings in the shell. They need to be treated carefully when used within arguments.\n\n### Asterisk: `*` {#sec-asterisk}\n\n**Glob Patterns**: `*` is the wildcard for matching **zero or more characters**. Arguments can include wildcards, which the shell expands into a list of files or directories that match the pattern. For example, `*.txt` would match all files in the current directory ending with `.txt`.\n\n**Example** \n\n`ls *.md` lists all files in the current directory that end with `.md`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls *.md\n#> README.md\n```\n:::\n\n\n\n\n\n### Question Mark: `?` {#sec-question}\n\n`?` is the wildcard for matching **exactly one character**.\n\n**Example** \n\n`ls myfile?.txt` lists files like `myfile2.txt`, but not `myfile.txt` and `my file 3.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls myfile?.txt\n#> myfile2.txt\n```\n:::\n\n\n\n\n\n\n### Tilde: `~` {#sec-tilde}\n\n`~` represents the home directory of the current user.\n\n**Example** \n\nList the items in the user's home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls ~\n#> Applications\n#> Creative Cloud Files\n#> Desktop\n#> Documents\n#> Downloads\n#> Dropbox\n#> Fonts\n#> Library\n#> Movies\n#> Music\n#> Pictures\n#> Public\n#> R\n#> Themes\n```\n:::\n\n\n\n\n\n\n### Dollar Sign: `$` {#sec-dollar}\n\n`$` indicates a variable.\n\n**Example** \n\n`echo $PATH` prints the value of the `PATH` environment variable:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $PATH\n```\n:::\n\n\n\n\n\n\n### Ampersand: `&` {#sec-ampersand}\n\n`&` runs a command in the background.\n\n**Example** \n\n`firefox &` opens Firefox in the background, allowing the terminal to be used for other commands.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfirefox &\n```\n:::\n\n\n\n\n\n\n### Semicolon: `;` {#sec-semicolon}\n\n`;` separates multiple commands to be run in sequence.\n\n**Example** \n\n`cd data; ls` changes the directory to `data` and then lists its contents:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd data; ls\n#> music_vids.tsv\n#> roxanne\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n\n### Greater Than: `>` {#sec-gt}\n\n**Redirection operators**: `>` directs output to a file or a device. \n\n**Example** \n\n`echo \"This is my 2nd file\" > myfile2.txt` writes `\"This is my 2nd file\"` into `myfile2.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"This is my 2nd file\" > myfile2.txt\n```\n:::\n\n\n\n\n\n### Less Than: `<` {#sec-lt}\n\n**Redirection operators**: `<` takes input from a file or a device.\n\n**Example** \n\nThen `wc < myfile2.txt` counts the words in `myfile2.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc < myfile2.txt\n#>        1       5      20\n```\n:::\n\n\n\n\n\n### Braces: `{}` {#sec-braces}\n\n**Brace Expansion**: Similar to wildcards, brace expansion (`{}`) allows the creation of multiple text strings from a pattern containing braces. \n\n**Example**\n\n`cat wu_tang.{txt,csv}` \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/wu_tang.{tsv,dat}\n#> Member\tName\n#> RZA\tRobert Diggs\n#> GZA\tGary Grice\n#> Method Man\tClifford Smith\n#> Raekwon the Chef\tCorey Woods\n#> Ghostface Killah\tDennis Coles\n#> Inspectah Deck\tJason Hunter\n#> U-God\tLamont Hawkins\n#> Masta Killa\tJamel Irief\n#> Cappadonna\tDarryl Hill\n#> Ol Dirty Bastard\tRussell Tyrone Jones\n#> |Member           |Name                 |\n#> |RZA              |Robert Diggs         |\n#> |GZA              |Gary Grice           |\n#> |Method Man       |Clifford Smith       |\n#> |Raekwon the Chef |Corey Woods          |\n#> |Ghostface Killah |Dennis Coles         |\n#> |Inspectah Deck   |Jason Hunter         |\n#> |U-God            |Lamont Hawkins       |\n#> |Masta Killa      |Jamel Irief          |\n#> |Cappadonna       |Darryl Hill          |\n#> |Ol Dirty Bastard |Russell Tyrone Jones |\n```\n:::\n\n\n\n\n\nwould expand into:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/wu_tang.tsv \ncat data/wu_tang.dat\n#> Member\tName\n#> RZA\tRobert Diggs\n#> GZA\tGary Grice\n#> Method Man\tClifford Smith\n#> Raekwon the Chef\tCorey Woods\n#> Ghostface Killah\tDennis Coles\n#> Inspectah Deck\tJason Hunter\n#> U-God\tLamont Hawkins\n#> Masta Killa\tJamel Irief\n#> Cappadonna\tDarryl Hill\n#> Ol Dirty Bastard\tRussell Tyrone Jones\n#> |Member           |Name                 |\n#> |RZA              |Robert Diggs         |\n#> |GZA              |Gary Grice           |\n#> |Method Man       |Clifford Smith       |\n#> |Raekwon the Chef |Corey Woods          |\n#> |Ghostface Killah |Dennis Coles         |\n#> |Inspectah Deck   |Jason Hunter         |\n#> |U-God            |Lamont Hawkins       |\n#> |Masta Killa      |Jamel Irief          |\n#> |Cappadonna       |Darryl Hill          |\n#> |Ol Dirty Bastard |Russell Tyrone Jones |\n```\n:::\n\n\n\n\n\n\n### Parentheses: `()` {#sec-parens}\n\nParentheses can be used to group commands or for command substitution with `$( )`.\n\n**Example** \n\n`(cd /var; ls)` runs `ls in /var` without changing the current directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(cd data; ls)\n#> music_vids.tsv\n#> roxanne\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n`$(command)` uses the output of `command`.\n\n### Backslash: `\\` {#sec-backslash}\n\n`\\` escapes the following character, nullifying its special meaning\n\n**Example** \n\n`echo \"File name with spaces \\& special characters\"` prints the text with spaces and the ampersand:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"File name with spaces \\& special characters\"\n#> File name with spaces \\& special characters\n```\n:::\n\n\n\n\n\n### Single quotes: `''` {#sec-single-quotes}\n\nSingle quotes (`' '`) treat every character literally, ignoring the special meaning of all characters.\n\n**Example** \n\n`echo '$HOME'` prints `$HOME`, not the path to the home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho '$HOME'\n#> $HOME\n```\n:::\n\n\n\n\n\n### Double quotes: `\"\"` {#sec-double-quotes}\n\nDouble quotes (`\" \"`) allow for the inclusion of special characters in an argument, except for the dollar sign (`$`), backticks (\\` \\`), and backslash (`\\`). \n\n**Example** \n\n`echo \"$HOME\"` prints the path to the home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"$HOME\"\n#> /Users/username\n```\n:::\n",
    "supporting": [
      "syntax_ref_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}