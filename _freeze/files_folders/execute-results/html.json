{
  "hash": "079e5dc532aa64ce63463ca3aeb5e809",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '# '\n---\n\n\n\n\n\n# Files and Folders  {#sec-files-folders .unnumbered}\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nThis section covers commands to help you navigate and manipulate files and folders using Unix commands. \n\n## Navigation {#sec-nav}\n\nWhen presented with a new map, the most important thing to find is your location on it. It's hard to know where you're going without knowing where you are. \n\n### `pwd` {#sec-pwd}\n\n**`pwd` (Print Working Directory)** tells you exactly where you are in the filesystem.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd # where am I?\n#  /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\n### `cd` {#sec-cd}\n\n **`cd` (Change Directory)** lets you move to a different folder on your computer.\n\nIf you want to move from the one place to another, `cd` can get you there. For example, `cd /bin` takes you to the `/bin` folder, the toolshed of software tools.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\npwd # now where am I?\n#  /bin\n```\n:::\n\n\n\n\n\n### `ls` {#sec-ls}\n\n**`ls` (List)** is like standing in one location, looking around, and seeing what files and folders are around you. In `/bin`, `ls` would show you the software tools available:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin # change location\nls # what's in here?\n#  [\n#  bash\n#  cat\n#  chmod\n#  cp\n#  csh\n#  dash\n#  date\n#  dd\n#  df\n#  echo\n#  ed\n#  expr\n#  hostname\n#  kill\n#  ksh\n#  launchctl\n#  link\n#  ln\n#  ls\n#  mkdir\n#  mv\n#  pax\n#  ps\n#  pwd\n#  realpath\n#  rm\n#  rmdir\n#  sh\n#  sleep\n#  stty\n#  sync\n#  tcsh\n#  test\n#  unlink\n#  wait4path\n#  zsh\n```\n:::\n\n\n\n\n\n### `file` {#sec-file}\n\n**`file`** gives you a summary of what a computer file is or what it contains, like telling you if a tool in `/bin/pax` is a program you can run or a text file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfile /bin/pax\n#  /bin/pax: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\n#  /bin/pax (for architecture x86_64):\tMach-O 64-bit executable x86_64\n#  /bin/pax (for architecture arm64e):\tMach-O 64-bit executable arm64e\n```\n:::\n\n\n\n\n\n### `less` {#sec-less}\n\n**`less`** lets you skim through a file on your computer, moving forwards and backwards as you please.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless data/gamehof.tsv\n```\n:::\n\n\n\n\n\n![Enter `less` in the Terminal to scroll](img/less.gif){width='100%' fig-align='center'}\n\n## Manipulate {#sec-manip-files-folders}\n\nIn the Unix/Linux world, file and directory management is a fundamental skill. This chapter dives deep into the commands that allow users to create, copy, move, remove, and link files and directories. Each section below introduces a different command, detailing its purpose and providing examples of its use.\n\n### `mkdir` {#sec-mkdir}\n\n**`mkdir` (Make Directory)** builds a new folder wherever you tell it to, like making a new folder in our project for outputs (`out/`) or documents (`doc/`).\n\n```bash\nmkdir out\nmkdir doc\n```\n\n### `cp` {#sec-cp}\n\n**`cp` (Copy)** duplicates files or folders. The `cp` command is used to Copy files or directories from one location to another. Imagine having a file (`myfile.txt`) on your root (`.`) directory that you want to copy to the `/data` folder; you could use `cp` to make a duplicate. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile.txt data/myfile.txt\n# confirm copy\nls data\n#  gamehof.tsv\n#  music_vids.tsv\n#  myfile.txt\n#  roxanne\n#  trees.tsv\n#  wu_tang.txt\n```\n:::\n\n\n\n\n\n### `mv` {#sec-mv}\n\n**`mv` (Move)**: `mv`, short for Move, functions similarly to picking up a book from your desk and placing it on a shelf. It moves files or directories from one location to another. It can also be used for renaming files. This command is especially useful for organizing files and directories that are in the wrong place.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# create folder\nmkdir doc\n# move file\nmv data/myfile.txt doc/myfile.txt \n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# confirm move\nls doc\n#  myfile.txt\n```\n:::\n\n\n\n\n\n### `rm` {#sec-rm}\n\n**`rm` (Remove)**: The `rm` command stands for Remove and is used to delete files or directories.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# remove doc folder\nrm doc\n#  rm: doc: is a directory\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n# add flag\nrm -R doc\n```\n:::\n\n\n\n\n\n\nUsing `rm` is a powerful action with significant consequences, as it permanently deletes files, akin to shredding documents. There's usually no easy way to recover deleted files unless you have a backup.\n\n\n### `ln` {#sec-ln}\n\n**`ln` (Link)**: `ln` creates Links to files or directories, making them accessible from multiple locations without duplicating the actual content. It's like creating a shortcut on your desktop to a program you frequently use. There are two types of links: hard links and symbolic (soft) links. Symbolic links are more commonly used because they can link to directories and provide more flexibility.\n\n```bash\nln -s /path/to/original /path/to/link\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}