{
  "hash": "216cd3a9179935873f94fa57bef4c6db",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#'\n---\n\n\n\n\n\n# Files {#sec-files}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon='false'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nThe following commands can be used for creating, managing, and manipulating files. Some of these commands also work on directories (which we covered in the previous chapter).\n\n## [Create]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nThe commands below can be used to create new files *or* update the time stamp of an existing file.\n\n### `touch`\n\nWe'll start by creating a new empty file (`data/who_tb_data.tsv`) with <code>@sec-touch</code>:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch data/who_tb_data.tsv\n```\n:::\n\n\n\n\n\nWe can confirm the new `who_tb_data.tsv` file was created, we'll use the `tree` command to check the `data` folder:\n\n``` {.bash style=\"background-color: #f8f8f8;\"}\ntree -P who_tb_data.tsv data\n# data\n# └── who_tb_data.tsv\n# \n# 1 directory, 1 file\n```\n\nThe `-P` option lets us specify a pattern to search for in the `data` folder, which we'll cover more in @sec-symbols-patterns.\n\n### `echo`\n\nWe can add some contents to the `data/who_tb_data.tsv` file using <code>@sec-echo</code> and the `>` operator.[^files-1]\n\n[^files-1]: `data/who_tb_data.tsv` comes from the [WHO global tuberculosis programme](https://www.who.int/teams/global-tuberculosis-programme/data#csv_files).\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"country\tyear\ttype\tcount\nAfghanistan\t1999\tcases\t745\nAfghanistan\t1999\tpopulation\t19987071\nAfghanistan\t2000\tcases\t2666\nAfghanistan\t2000\tpopulation\t20595360\nBrazil\t1999\tcases\t37737\nBrazil\t1999\tpopulation\t172006362\nBrazil\t2000\tcases\t80488\nBrazil\t2000\tpopulation\t174504898\nChina\t1999\tcases\t212258\nChina\t1999\tpopulation\t1272915272\nChina\t2000\tcases\t213766\nChina\t2000\tpopulation\t1280428583\" > data/who_tb_data.tsv\n```\n:::\n\n\n\n\n\n## [View]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\n<code>@sec-cat</code> concatenates and displays file contents. We can use this to view the entire `data/who_tb_data.tsv` file we just created:\n\n### `cat`\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/who_tb_data.tsv\n# country\tyear\ttype\tcount\n# Afghanistan\t1999\tcases\t745\n# Afghanistan\t1999\tpopulation\t19987071\n# Afghanistan\t2000\tcases\t2666\n# Afghanistan\t2000\tpopulation\t20595360\n# Brazil\t1999\tcases\t37737\n# Brazil\t1999\tpopulation\t172006362\n# Brazil\t2000\tcases\t80488\n# Brazil\t2000\tpopulation\t174504898\n# China\t1999\tcases\t212258\n# China\t1999\tpopulation\t1272915272\n# China\t2000\tcases\t213766\n# China\t2000\tpopulation\t1280428583\n```\n:::\n\n\n\n\n\n### `more` & `less`\n\n<code>@sec-less</code> and <code>@sec-more</code> lets you skim through a file on your computer, moving forwards and backwards as you please. These commands are helpful for larger files, like the Video Game Hall of Fame data stored in the `data/vg_hof.tsv` file:[^files-2]\n\n[^files-2]: `data/vg_hof.tsv` is the [Video Game Hall of Fame data](https://en.wikipedia.org/wiki/World_Video_Game_Hall_of_Fame)\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmore data/vg_hof.tsv\n```\n:::\n\n\n\n\n\n![Enter 'q' to exit the `more` scroll](img/more.gif){width=\"100%\" fig-align=\"center\"}\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nless data/vg_hof.tsv\n```\n:::\n\n\n\n\n\n![Enter 'q' to exit the `less` scroll](img/less.gif){width=\"100%\" fig-align=\"center\"}\n\n### `head` & `tail`\n\nThe <code>@sec-head</code> and <code>@sec-tail</code> commands let us view the tops and bottoms of files (the `-n3` specifies three rows from `data/vg_hof.tsv`).\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -n3 data/vg_hof.tsv\n# year\tgame\tdeveloper\tyear_released\n# 2015\tDOOM\tid Software\t1993\n# 2015\tPac-Man\tNamco\t1980\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n3 data/vg_hof.tsv\n# 2024\tTony Hawk's Pro Skater\tNeversoft\t1999\n# 2024\tUltima\tRichard Garriott, Origin Systems\t1981\n# 2024\tYou Don't Know Jack\tJellyvision\t1995\n```\n:::\n\n\n\n\n\n## [Look]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nThese commands can help you search for files (and directories).\n\n### `grep`\n\n<code>@sec-grep</code> searches files for lines matching a pattern. We'll use it to search for a specfic video game title in `data/vg_hof.tsv`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep \"The Oregon Trail\" data/vg_hof.tsv\n# 2015\tThe Oregon Trail\tDon Rawitsch, Bill Heinemann, and Paul Dillenberger\t1971\n# 2016\tThe Oregon Trail\tDon Rawitsch, Bill Heinemann, and Paul Dillenberger\t1971\n```\n:::\n\n\n\n\n\n<code>@sec-find</code> is used to search for files and directories in a directory hierarchy based on various criteria such as name, size, file type, and modification time.\n\n### `find`\n\nThe `.psv` extension is used for [pipe-separated files](https://en.wikipedia.org/wiki/Delimiter-separated_values) (`|`). We'll use `find` to locate any `.psv` files in `data/`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfind data -name \"*.psv\"\n# data/wu_tang.psv\n```\n:::\n\n\n\n\n\n`find` can be very specific, too. For example, the commands below look in the `data` directory for tab-delimited files (i.e., with a `.tsv` extension modified in the last day.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfind data -name \"*.tsv\" -mtime -1\n# data/who_tb_data.tsv\n```\n:::\n\n\n\n\n\n### `locate`\n\n<code>@sec-locate</code> finds files by name quickly using a database.[^files-3]\n\n[^files-3]: `locate` sometimes requires the search database is generated/updated. Read more [here](https://linuxize.com/post/locate-command-in-linux/)\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nlocate who_tb_data data | head -n3\n# /Users/username/projects/books/fm-unix/data/who_tb_data.csv\n# /Users/username/projects/books/fm-unix/data/who_tb_data.psv\n# /Users/username/projects/books/fm-unix/data/who_tb_data.tsv\n```\n:::\n\n\n:::: {.callout-warning collapse='true' appearance='simple' icon='false'}\n\n## [Updating `locate` database]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\n\nMake sure your `locate` database is up-to-date using one of the commands below if you've recently added or moved files to get accurate results:\n  \n``` sh\n# on linux\nsudo updatedb\n```\n\n``` sh\n# on macos\nsudo /usr/libexec/locate.updatedb\n```\n  \n\n\n::: \n\n::::\n\n\n\n\n\n## [Manage]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nThe commands below can be used for copying, moving, renaming, and creating links to files. Assume we want to create backups of the delimiter-separated data files in the `data/` folder. We'll store these backups in folders according the file extension.\n\nFirst we need to create folders for each type of delimiter (`.csv`, `.tsv`, and `.psv`):\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir data/csv\nmkdir data/tsv\nmkdir data/psv\n```\n:::\n\n\n\n\n\nConfirm these new folders with `tree -d`\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data -d\n# data\n# ├── csv\n# ├── psv\n# └── tsv\n# \n# 4 directories\n```\n:::\n\n\n\n\n\n### `cp`\n\nWe'll copy the files into their respective folder based their extension using <code>@sec-cp</code> and `*`. For reference, here is a look of the `data/` folder before and after copying the `.csv` files:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp data/*.csv data/csv/\n```\n:::\n\n\n\n\n\n::: {layout=\"[50,50]\" layout-valign=\"bottom\"}\n*Before copying `.csv` files into `data/csv/`:*\n\n*After copying `.csv` files into `data/csv/`:*[^files-4]\n:::\n\n[^files-4]: The `-L 2` option tells tree to only look in the data folder (no subfolders) and `-P '*.csv'` matches the `.csv` files.\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` bash\ntree data -L 2 -P '*.csv'\n# data\n# ├── csv\n# ├── psv\n# ├── pwrds.csv\n# ├── tsv\n# └── wu_tang.csv\n# \n# 4 directories, 2 files\n```\n\n``` bash\ntree data -L 2 -P '*.csv'\n# data\n# ├── csv\n# │   ├── pwrds.csv\n# │   └── wu_tang.csv\n# ├── psv\n# ├── pwrds.csv\n# ├── tsv\n# └── wu_tang.csv\n\n4 directories, 4 files\n```\n:::\n\nNote that the number of `.csv` files doubled (from two files to four files). We'll do the same for the `.tsv` and `.psv` files.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp data/*.tsv data/tsv/\n```\n:::\n\n\n\n\n\nConfirm the `.tsv` files were copied:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data/tsv/\n# data/tsv/\n# ├── music_vids.tsv\n# ├── pwrds.tsv\n# ├── trees.tsv\n# ├── vg_hof.tsv\n# ├── who_tb_data.tsv\n# └── wu_tang.tsv\n# \n# 1 directory, 6 files\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp data/*.psv data/psv/\n```\n:::\n\n\n\n\n\nConfirm the `.psv` files were copied:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data/psv/\n# data/psv/\n# └── wu_tang.psv\n# \n# 1 directory, 1 file\n```\n:::\n\n\n\n\n\n### `mv`\n\nThe commands below create `.csv` and `.psv` versions of the `who_tb_data.tsv` we created above:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch data/csv/who_tb_data.csv\necho \"country,year,type,count\nAfghanistan,1999,cases,745\nAfghanistan,1999,population,19987071\nAfghanistan,2000,cases,2666\nAfghanistan,2000,population,20595360\nBrazil,1999,cases,37737\nBrazil,1999,population,172006362\nBrazil,2000,cases,80488\nBrazil,2000,population,174504898\nChina,1999,cases,212258\nChina,1999,population,1272915272\nChina,2000,cases,213766\nChina,2000,population,1280428583\" > data/csv/who_tb_data.csv\n\ntouch data/who_tb_data.psv\necho \"| country     | year | type       | count      |\n|-------------|------|------------|------------|\n| Afghanistan | 1999 | cases      | 745        |\n| Afghanistan | 1999 | population | 19987071   |\n| Afghanistan | 2000 | cases      | 2666       |\n| Afghanistan | 2000 | population | 20595360   |\n| Brazil      | 1999 | cases      | 37737      |\n| Brazil      | 1999 | population | 172006362  |\n| Brazil      | 2000 | cases      | 80488      |\n| Brazil      | 2000 | population | 174504898  |\n| China       | 1999 | cases      | 212258     |\n| China       | 1999 | population | 1272915272 |\n| China       | 2000 | cases      | 213766     |\n| China       | 2000 | population | 1280428583 |\" > data/who_tb_data.psv\n```\n:::\n\n\n\n\n\nOops--it looks like the `who_tb_data.psv` file was created in the `data` folder (and not the `data/psv` folder): [^files-5]\n\n[^files-5]: The `-L 2` option tells tree to only look in the data folder (no subfolders) and `-P '*who_tb_data.psv|*who_tb_data.csv'` matches the `who_tb_data.psv` *or* the `who_tb_data.csv` file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data -L 2 -P '*who_tb_data.psv|*who_tb_data.csv'\n# data\n# ├── csv\n# │   └── who_tb_data.csv\n# ├── psv\n# ├── tsv\n# └── who_tb_data.psv\n# \n# 4 directories, 2 files\n```\n:::\n\n\n\n\n\nWe'll use <code>@sec-mv</code> to move the `who_tb_data.psv` and `data/who_tb_data.psv` files into `data/psv/` and confirm with `tree`:[^files-6]\n\n[^files-6]: `cp` and `mv` also work with directories.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv data/who_tb_data.psv data/psv/who_tb_data.psv\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data/psv\n# data/psv\n# ├── who_tb_data.psv\n# └── wu_tang.psv\n# \n# 1 directory, 2 files\n```\n:::\n\n\n\n\n\n### `ln`\n\n<code>@sec-ln</code> is used to create links between files. It can create two types of links: hard links and symbolic (or soft) links.\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n**A hard link** is an additional name for an existing file on the same file system, and is effectively an additional directory entry for the file. In Unix/Linux file systems, all file names are technically hard links.\n\n**A symbolic link** (often called a symlink) is a file that points to another file or directory, and it contains a path to another entry somewhere in the file system.\n:::\n\nWith the `ln` command, you need to specify the target file first (the original file) and then the name of the new link:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nln original_file.txt new_link.txt\n```\n:::\n\n\n:::: {.callout-warning collapse='true' appearance='default' icon='false'}\n\n## [`ln`]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\n\n  `ln` doesn’t produce any output and returns zero when it's successful.\n  \n\n::: \n\n::::\n\n\n\n\n\nWe'll use `ln` to create `data/who_tb_data.psv`, a hard link for the data file in `data/psv/who_tb_data.psv`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nln data/psv/who_tb_data.psv data/who_tb_hardlink.psv\n```\n:::\n\n\n\n\n\nIf we check the `data` folder with `tree`, we see the new `who_tb_data.psv` file looks identical to the other files:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data -P '*.psv'\n# data\n# ├── csv\n# ├── psv\n# │   ├── who_tb_data.psv\n# │   └── wu_tang.psv\n# ├── tsv\n# ├── who_tb_hardlink.psv\n# └── wu_tang.psv\n# \n# 4 directories, 4 files\n```\n:::\n\n\n\n\n\nHard links are basically copies--changes made to one will reflect in the other since they both refer to the same data.\n\nNow we'll use `ln -s` to create `data/who_tb_symlink.csv`, a *symlink* for the data file in `data/csv/who_tb_data.csv`.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nln -s csv/who_tb_data.csv data/who_tb_symlink.csv\n```\n:::\n\n\n\n\n\nWhen we look at the folder with `tree` now, we see the symlink is listed with a special pointer (`->`) to the original file:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntree data -P '*.csv'\n# data\n# ├── csv\n# │   ├── pwrds.csv\n# │   ├── who_tb_data.csv\n# │   └── wu_tang.csv\n# ├── psv\n# ├── pwrds.csv\n# ├── tsv\n# ├── who_tb_symlink.csv -> csv/who_tb_data.csv\n# └── wu_tang.csv\n# \n# 4 directories, 6 files\n```\n:::\n\n\n\n\n\nThe symbolic link only references the actual file, but doesn't store the data itself.\n\n\n\n\n\n\n:::: {.callout-tip collapse='true' appearance='simple' icon='false'}\n\n## [Tip: `ln` & `tree`]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\n\nThe `tree` command displays the target file first (the original file) and the link using color:\n\n![Color for symlinks with `tree`](img/symlink-color.png){width='70%' fig-align='center'}\n\n\n\n::: \n\n::::\n\n\n\n\n\n## [Info]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nThe commands below return different types of information from a files (or files).\n\n### `ls`\n\nThe <code>@sec-ls</code> command lists the contents of a directory.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls data/who_tb_hardlink.psv\n# data/who_tb_hardlink.psv\n```\n:::\n\n\n\n\n\nAdding `-l` returns the contents in a detailed long format. The information below is from the hardlink for the `.psv` file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l data/psv/who_tb_data.psv\n# -rw-r--r--@ 2 username  staff  686 May 13 13:09 data/psv/who_tb_data.psv\n```\n:::\n\n\n\n\n\n`-l` will add information like file permissions, number of links, owner, group, file size, and last modification date for each item.\n\nIf we check the hardlink for the `.psv` file:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l data/who_tb_hardlink.psv\n# -rw-r--r--@ 2 username  staff  686 May 13 13:09 data/who_tb_hardlink.psv\n```\n:::\n\n\n\n\n\nBoth `ls -l` commands return similar information for the `who_tb_data.psv` files, indicating they're not treated as separate files, but rather two paths to the *same file*.\n\nThe preceding `@ 2` indicates both files have two hard links, meaning `who_tb_data.psv` is physically located in one place but can be accessed from two locations: `data/who_tb_data.psv` and `data/psv/who_tb_data.psv`.\n\nCompare this to the symlink we created with it's original file:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l data/who_tb_symlink.csv\n# lrwxr-xr-x@ 1 username  staff  19 May 13 13:10 data/who_tb_symlink.csv -> csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\nThe `ls -l` output for `data/who_tb_data.csv` (the symlink) returns `lrwxr-xr-x` (file permissions for a symbolic link) and includes `@ 1`, indicating a single hard link (symbolic links always have one link).\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls -l data/csv/who_tb_data.csv\n# -rw-r--r--@ 1 username  staff  381 May 13 13:09 data/csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\nThe `who_tb_data.csv` file in `data/csv` returns `-rw-r--r--` (standard file permissions),\n\nWe'll cover this output more in the @sec-file-permissions section below.\n\n### `diff`\n\n<code>@sec-diff</code> compare the contents of two files line-by-line. We'll use `diff` to compare the pipe-separated values file (`data/wu_tang.psv`) to the comma-separated separated values file (`data/wu_tang.csv`)\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndiff data/wu_tang.psv data/wu_tang.csv\n```\n:::\n\n\n\n\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# 1,11c1,11\n```\n\nThe first line of the output indicates that lines 1 through 11 in the first file (`data/wu_tang.psv`) have been changed compared to lines 1 through 11 in the second file (`data/wu_tang.csv`).\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\nLines starting with `<` indicate the content from the first file (`data/wu_tang.psv`). These entries are separated by pipes or spaces (as commonly used in PSV files).\n\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# < |Member           |Name                 |\n# < |RZA              |Robert Diggs         |\n# < |GZA              |Gary Grice           |\n# < |Method Man       |Clifford Smith       |\n# < |Raekwon the Chef |Corey Woods          |\n# < |Ghostface Killah |Dennis Coles         |\n# < |Inspectah Deck   |Jason Hunter         |\n# < |U-God            |Lamont Hawkins       |\n# < |Masta Killa      |Jamel Irief          |\n# < |Cappadonna       |Darryl Hill          |\n# < |Ol Dirty Bastard |Russell Tyrone Jones |\n```\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# > Member,Name\n# > RZA,Robert Diggs\n# > GZA,Gary Grice\n# > Method Man,Clifford Smith\n# > Raekwon the Chef,Corey Woods\n# > Ghostface Killah,Dennis Coles\n# > Inspectah Deck,Jason Hunter\n# > U-God,Lamont Hawkins\n# > Masta Killa,Jamel Irief\n# > Cappadonna,Darryl Hill\n# > Ol Dirty Bastard,Russell Tyrone Jones\n```\n\nLines starting with `>` show the content from the second file (`data/wu_tang.csv`). These entries are separated by commas, as is typical for CSV files.\n:::\n\nThere is no difference in the actual data (`Member` or `Name`)--both files contain the same information, so the primary difference is purely in the formatting of the data: the PSV (pipe-separated Values) file uses vertical bars (`|`) and spaces to separate data fields, whereas the CSV (comma-separated values) file uses commas (`,`).[^files-7]\n\n[^files-7]: This type of difference is significant if the format impacts how data is parsed or used. For example, a software program expecting data in CSV format might not correctly parse a PSV file, and vice versa.\n\nWhat happens when we compare the symlink (`data/who_tb_data.csv`) and it's original file (`data/csv/who_tb_data.csv`) with `diff`?\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndiff data/who_tb_symlink.csv data/csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\n**`diff` returns nothing and doesn’t produce any output if there are no differences between the two files.**\n\nDeleting, moving, or renaming the original file does not affect the integrity of a hardlink:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# remove original file\nrm data/psv/who_tb_data.psv\n# check hard link\ncat data/who_tb_hardlink.psv\n# | country     | year | type       | count      |\n# |-------------|------|------------|------------|\n# | Afghanistan | 1999 | cases      | 745        |\n# | Afghanistan | 1999 | population | 19987071   |\n# | Afghanistan | 2000 | cases      | 2666       |\n# | Afghanistan | 2000 | population | 20595360   |\n# | Brazil      | 1999 | cases      | 37737      |\n# | Brazil      | 1999 | population | 172006362  |\n# | Brazil      | 2000 | cases      | 80488      |\n# | Brazil      | 2000 | population | 174504898  |\n# | China       | 1999 | cases      | 212258     |\n# | China       | 1999 | population | 1272915272 |\n# | China       | 2000 | cases      | 213766     |\n# | China       | 2000 | population | 1280428583 |\n```\n:::\n\n\n\n\n\nHowever, if the original file for a symlink is deleted, moved, or renamed, the symbolic link breaks and typically becomes a 'dangling' link that points to a non-existent path.\n\n### `file`\n\n<code>@sec-file</code> gives us a summary of what a file is or what it contains, like telling us what's in `data/who_tb_data.csv`.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfile data/who_tb_symlink.csv\n# data/who_tb_symlink.csv: CSV text\n```\n:::\n\n\n\n\n\nThe `-i` option will tell us if this is a regular file:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfile -i data/who_tb_symlink.csv\n# data/who_tb_symlink.csv: regular file\n```\n:::\n\n\n\n\n\n### `readlink`\n\n`readlink` displays the target of a symbolic link.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nreadlink data/who_tb_symlink.csv\n# csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\nThe `-f` option provides the target's absolute path.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nreadlink -f data/who_tb_symlink.csv\n# path/to/data/csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\n### `wc`\n\n<code>@sec-wc</code> (**word count**) counts the number of lines, words, and characters in the given input. If a file name is provided, it performs the count on the file; otherwise, it reads from the standard input.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc data/who_tb_symlink.csv\n#       13      13     381 data/who_tb_symlink.csv\n```\n:::\n\n\n\n\n\n### `stat`\n\n<code>@sec-stat</code> displays detailed information about files.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nstat data/who_tb_symlink.csv\n# 16777221 317774438 lrwxr-xr-x 1 username staff 0 19 \"May 13 13:10:34 2024\" \\\n#     \"May 13 13:10:34 2024\" \"May 13 13:10:34 2024\" \"May 13 13:10:34 2024\"     \\ \n#     4096 0 0 data/who_tb_symlink.csv\n```\n:::\n\n\n\n\n\nAdding the `-l` includes the symbolic link to the original file.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nstat -l data/who_tb_symlink.csv\n# lrwxr-xr-x 1 username staff 19 May 13 13:10:34 2024 \\\n#     data/who_tb_symlink.csv -> csv/who_tb_data.csv\n```\n:::\n\n\n\n\n\n### `du`\n\n<code>@sec-du</code> estimates file space usage.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu data/pwrds.csv\n# 24\tdata/pwrds.csv\n```\n:::\n\n\n\n\n\nThe `-h` makes the output human readable.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -h data/pwrds.csv\n#  12K\tdata/pwrds.csv\n```\n:::\n\n\n\n\n\nIf we pass the original and symlink of `who_tb_data.csv` to `du`, we see the symlink doesn't contain any *actual* data:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -h data/csv/who_tb_data.csv\n# 4.0K\tdata/csv/who_tb_data.csv\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -h data/who_tb_symlink.csv\n#   0B\tdata/who_tb_symlink.csv\n```\n:::\n\n\n\n\n\n## [Permissions]{style=\"font-size: 1.05em; font-weight: bold;\"} {#sec-file-permissions}\n\nWe'll go over file permissions in-depth in the @sec-perms chapter, but I'll quickly summarize two common uses of `chmod` and `chown` below.\n\nFirst we'll check the permissions with `ls -l`:\n\n``` bash\nls -l data/README.md\n# -rw-r--r--@ 1 username  staff  8834 May 14 09:33 data/README.md\n```\n\nThe file permissions for `data/README.md` are stored in the combination of characters and symbols returned from `ls -l`:\n\nBreakdown of **`-rw-r--r--@`**:\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -\n```\n\nThe `-` indicates that the item is a regular file.\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -rw-\n```\n\nThe first three characters after the dash represent the user (owner) permissions. The user has read (`r`) and write (`w`) permissions but no execute (`x`) permission.\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -rw-r--\n```\n\nThe next three characters represent the group permissions. The group has read (`r`) permission only, with no write (`w`) or execute (`x`) permissions.\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -rw-r--r--\n```\n\nThe final three characters represent the permissions for others (everyone else). Like the group, others have only read (`r`) permission, with no write (`w`) or execute (`x`) permissions.\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -rw-r--r--@\n```\n\nThe `@` symbol indicates that the file has extended attributes, which are additional metadata stored by the operating system.\n:::\n\n::: {layout=\"[50,50]\" layout-valign=\"top\"}\n``` {.sh style=\"background-color: #f8f8f8; font-style: italic;\"}\n# -rw-r--r--@ 1\n```\n\nThe `1` indicates the count of hard links pointing to the file, which in this case is the file itself. This is typical for regular files that haven't been explicitly linked elsewhere.\n:::\n\n\n\n\n\n```{=html}\n<!--\nOverall, the permissions `644` (as represented numerically) allow the owner to read and write the file, while the group and others can only read it.\n-->\n```\n\n\n\n\n### `chmod`\n\n<code>@sec-chmod</code> changes file permissions. To change the file permissions using `chmod`, using either symbolic notation or numeric (octal) notation. Below are some simple examples using both methods.\n\n**Symbolic Notation**\n\nTo grant the permissions above (i.e., `-rw-r--r--`) with symbolic notation with `chmod`, we could use:\n\n``` {.sh}\nchmod u=rw,g=r,o=r data/README.md\n```\n\n**`u=rw`**: sets the `u`ser (owner) permissions to `r`ead and `w`rite.\n\n**`g=r`**: sets the `g`roup permissions to `r`ead.\n\n**`o=r`**: set the permissions for `o`thers to `r`ead.\n\nWe could also group the permissions and settings using the follow `chmod` command:\n\n``` {.sh}\nchmod u=rw,go=r filename\n```\n\nIn this case,\n\n**`u=rw`**: specifies that the `u`ser (owner) can `r`ead and `w`rite\n\n**`go=r`**: specifies that *both* the `g`roup and `o`thers can `r`ead, but not `w`rite or `e`xecute.\n\nWe can also use `chmod` to add permissions with `+`. The code below grants execute permissions to the user (owner) of the file named `data/README.md`:\n\n``` {.sh}\nchmod u+x data/README.md\n```\n\nThis command adds (`+`) execute (`x`) permission to the user (`u`) of the file.\n\n**Numeric Notation**\n\nTo set the permissions of the file `data/README.md` so that the user can read and execute it, the group can read it, and others have no permissions, you would use:\n\n``` bash\nchmod 750 data/README.md\n```\n\nHere, `7` stands for read (`4`), write (`2`), and execute (`1`) permissions for the user. `5` represents read and execute permissions for the group (`4+1`), and `0` means no permissions for others.\n\nBoth of these examples modify the permissions of `data/README.md` to enhance or restrict access as specified.\n\n### `chown`\n\n<code>@sec-chown</code> changes file ownership\n\n\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}