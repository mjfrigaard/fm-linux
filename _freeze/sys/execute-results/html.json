{
  "hash": "e1da7a1bdbadd88c33344d7fe4ca3014",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#'\n---\n\n\n\n\n\n# System {#sec-sys}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon='false'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\n<!-- **System Monitoring**: `top`, `htop`, `free`, `df`, `du` -->\n\nThis chapter covers monitoring performance and resource usage in the Linux systems. These commands will help ensure that the servers and applications are running efficiently and can help you preemptively address potential issues before they escalate into major problems. \n\nWe'll delve into some of the most essential and widely-used system monitoring commands: `top`, `htop`, `free`, `df`, and `du`\n\n## [Real-time monitoring]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\n### `top`\n\n**<code>@sec-top</code>** displays a dynamic, real-time view of the systemâ€™s processes, including CPU and memory usage. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntop\n```\n:::\n\n\n\n\n\n![`top` in iTerm2](img/top.gif){width='100%' fig-align='center'}\n\n\n### `htop`\n\n**<code>@sec-htop</code>** is a more user-friendly and visually appealing alternative to `top`.[^htop]\n\n![`htop` in GNOME](img/htop.gif){width='100%' fig-align='center'}\n\n`htop` enhances usability with features like color coding, an interactive interface, and the ability to scroll through processes.\n\n[^htop]: You can install htop on macOS with [homebrew.](https://formulae.brew.sh/formula/htop) Read more [here](https://htop.dev/)\n\n## [Snapshots]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\n### `free` \n\n**<code>@sec-free</code>** displays the amount of free and used memory in the system, giving you a quick snapshot of memory allocation and availability:\n\n\n\n\n\n\n::::{.column-margin}\n\n:::{style='font-size: 0.90rem;'}\n\nBash ![](img/bash-logo.svg){fig-align='center' width='30'} on Linux ![](img/tut.png){fig-align='center' width='30'}.\n\n:::\n:::: \n\n\n\n\n\n![](img/free-ubuntu.png){width='100%'}\n\nYou can add `-h` to make it more human-readable: \n\n![](img/free-h-ubuntu.png){width='100%'}\n\n\n### `df`\n\n**<code>@sec-df</code>** (disk free) shows disk usage in a human-readable format, including the size, used space, available space, and the mount point of each filesystem. \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndf\n#> Filesystem                       512-blocks      Used Available Capacity iused     ifree %iused  Mounted on\n#> /dev/disk1s1s1                    976490576  20002808  84798224    20%  403755 423991120    0%   /\n#> devfs                                   395       395         0   100%     684         0  100%   /dev\n#> /dev/disk1s3                      976490576   5059568  84798224     6%    5077 423991120    0%   /System/Volumes/Preboot\n#> /dev/disk1s5                      976490576   2097312  84798224     3%       1 423991120    0%   /System/Volumes/VM\n#> /dev/disk1s6                      976490576     39200  84798224     1%      19 423991120    0%   /System/Volumes/Update\n#> /dev/disk1s2                      976490576 861746736  84798224    92% 5662798 423991120    1%   /System/Volumes/Data\n#> map auto_home                             0         0         0   100%       0         0     -   /System/Volumes/Data/home\n```\n:::\n\n\n\n\n\nBy default, it displays sizes in 1K blocks but can show them in a more readable format (like MB or GB) with the `-h` option (human-readable).\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndf -h\n# Filesystem                          Size    Used   Avail Capacity iused ifree %iused  Mounted on\n# /dev/disk1s1s1                     466Gi   9.5Gi    35Gi    22%    404k  367M    0%   /\n# devfs                              197Ki   197Ki     0Bi   100%     682     0  100%   /dev\n# /dev/disk1s3                       466Gi   2.4Gi    35Gi     7%    5.1k  367M    0%   /System/Volumes/Preboot\n# /dev/disk1s5                       466Gi   2.0Gi    35Gi     6%       2  367M    0%   /System/Volumes/VM\n# /dev/disk1s6                       466Gi    20Mi    35Gi     1%      19  367M    0%   /System/Volumes/Update\n# /dev/disk1s2                       466Gi   415Gi    35Gi    93%    6.2M  367M    2%   /System/Volumes/Data\n# map auto_home                        0Bi     0Bi     0Bi   100%       0     0     -   /System/Volumes/Data/home\n\n```\n:::\n\n\n\n\n\n### `du`\n\n**<code>@sec-du</code>** summarizes disk usage for directories and files, allowing you to pinpoint large files and directories that may be consuming excessive disk space.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu data\n# 128\tdata/raw\n# 240\tdata\n```\n:::\n\n\n\n\n\nJust like `df`, show the output in a more readable format (like MB or GB) with the `-h` (human-readable) option:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu -h data\n#  64K\tdata/raw\n# 120K\tdata\n```\n:::\n\n\n\n\n\n### `ps`\n\n**<code>@sec-ps</code>** reports a snapshot of the process status for all running processes, regardless of the owner, including the process ID (`PID`), terminal type (`TTY`), cumulative CPU time (`TIME`), and the command (`CMD`) that started each process:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nps\n#   PID TTY           TIME CMD\n# 10409 ttys000    0:00.01 -bash\n```\n:::\n\n\n\n\n\n\nCommand options can also expand the selection to include other users' processes, full command lines, etc.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nps -o lstart,sess,pmem,pcpu,etime,command\n# STARTED                        SESS %MEM  %CPU ELAPSED COMMAND\n# Fri Aug 30 13:08:56 2024          0  0.0   0.0   38:09 -bash\n```\n:::\n\n\n\n\n\n\nThe specified columns are: \n\n  -   `lstart`: The exact date and time the process was started  \n  -   `sess`: The session ID of the process  \n  -   `pmem`: The percentage of the physical memory used by the process  \n  -   `pcpu`: The percentage of the CPU time used by the process  \n  -   `etime`: The elapsed time since the process started \n  -   `command`: The command and arguments\n\n## [Recap]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\nIn this chapter, we explored five essential system monitoring commands in Linux: `top`, `htop`, `free`, `df`, and `du`. These commands provide crucial insights into system performance and resource utilization, enabling efficient monitoring and troubleshooting of Linux systems.\n\nMastering these commands will help you monitor and maintain optimal system performance, ensure efficient resource utilization, and quickly address potential issues.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}