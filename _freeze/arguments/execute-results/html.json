{
  "hash": "aee6c6c6b978b9549a651d5ef001b336",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#'\n---\n\n\n\n\n\n\n# Arguments {#sec-args}\n\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon='false'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is being revised. Thank you for your patience.\n\n::: \n\n::::\n\n\n\n\n\n\nArguments in Unix/Linux commands are values or data passed to commands for processing. Unlike options, which modify the behavior of commands, arguments typically specify what the command should *act upon*. This typically includes filenames, user names, data values, or other kinds of information the command needs to execute its task.\n\n\n## [Anatomy]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nA Unix command can be broken down into the command name, followed by its options (which we'll address in the next chapter), and then its arguments:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncommand argument1 argument2 ... argument\n```\n:::\n\n\n\n\n\n\n## [Argument Types]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\nBelow are a variety of command arguments types. This is not an exhaustive list, but includes many of the commands and arguments you'll encounter on a regular basis.\n\n### Direct arguments\n\n**Direct arguments** are the most straightforward type of arguments. They are typically the names of files or directories on which commands operate. \n\n**Example** \n\nIn the command `cat my_file.txt`, `my_file.txt` is a direct argument to the <code>@sec-cat</code> command, telling it which file to display on the standard output.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat my_file.txt\n# This is my file\n```\n:::\n\n\n\n\n\n\n###  Indirect arguments\n\n**Indirect arguments** are arguments that might specify additional information that commands need to complete their tasks.\n\n**Example** \n\nThe `file` search pattern for the <code>@sec-grep</code> command is an example of an indirect command, and `myfile.txt` is the direct argument.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep file my_file.txt\n# This is my file\n```\n:::\n\n\n\n\n\n\nMost commonly, arguments are the names of **files and directory names** on which the command will operate.\n\n**Example**\n\n`my_file.txt` and `tmp/tmp_file.txt` are arguments representing the source and destination locations to move with <code>@sec-mv</code>, respectively.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv my_file.txt tmp/tmp_file.txt\n```\n:::\n\n\n\n\n\n\nCommands related to user management might take **user and group names** names as arguments.\n\n**Example**\n\n<code>@sec-chown</code> changes the ownership of `file` to `user` and `group`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nchown user:group myfile.txt\n```\n:::\n\n\n\n\n\n\n### Command Targets\n\nSome commands take **other commands as arguments**.\n\n**Example**\n\nFor example, <code>@sec-sudo</code> command runs command with superuser privileges.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo vi path/to/file.config\n```\n:::\n\n\n\n\n\n\n### Data Values\n\nCommands might take **data values** as arguments for processing. \n\n**Example**\n\nIn `echo Hello, World!`, `Hello, World!` is the argument value that <code>@sec-echo</code> prints to the terminal.\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Hello, World!\n# Hello, World!\n```\n:::\n\n\n\n\n\n\n### Order and Position\n\nFor many commands, the **order** of the arguments is significant. \n\n**Example** \n\n`tmp/tmp_file.txt` is the first argument (indicating the file to copy from), and `new_file.txt` is the second argument (indicating where to copy the file to). \n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp tmp/tmp_file.txt new_file.txt\n```\n:::\n\n\n\n\n\n\nReversing these arguments would result in a completely different operation.\n\nArguments that contain **spaces** must be quoted or escaped, so the shell understands them as a single argument rather than multiple arguments. \n\n**Example** \n\nTo copy the contents of the new `new_file.txt` to `'my new file.txt'`, you would use:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp new_file.txt 'my new file.txt'\n```\n:::\n\n\n\n\n\n\n### Command Substitution\n\nThe **output of a command can be used as an argument for another command** using backticks (\\` \\`) or `$( )`. \n\n**Example** \n\n`echo $(grep file 'my file 2.txt')` uses the output of the <code>@sec-grep</code> command as an argument for <code>@sec-echo</code>:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $(grep file 'my new file.txt')\n# This is my file\n```\n:::\n\n\n\n\n\n\n### Variables as Arguments\n\n**Environment variables** can be used as arguments in commands. \n\n**Example** \n\n`echo $HOME` prints the path to the user's home directory, where `$HOME` is an argument that the <code>@sec-echo</code> command interprets:\n\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $HOME\n# /Users/username\n```\n:::\n\n\n\n\n\n\n## [Recap]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\n\nUnderstanding the nuances of Unix arguments is crucial for crafting precise and effective commands, allowing users to leverage the full power of the Unix command line for a wide array of tasks.\n\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}