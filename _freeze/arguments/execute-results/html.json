{
  "hash": "1d057963633150772de0910cc949d7cd",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '# '\n---\n\n\n\n\n\n# Arguments {#sec-args .unnumbered}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nArguments follow the command and provide additional information or specify targets for the command, such as file names and paths. \n\n```bash\n$ command [argument]\n```\n\nWe'll use the <code>@sec-ls</code> command to list the directory contents of the root directory (accessed with `/`):\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls /\n#  Applications\n#  Library\n#  System\n#  Users\n#  Volumes\n#  bin\n#  cores\n#  dev\n#  etc\n#  home\n#  opt\n#  private\n#  sbin\n#  tmp\n#  usr\n#  var\n```\n:::\n\n\n\n\n\nIn the example above, `/` is the argument passed to the `ls` command.\n\n## Quotes\n\nFor example, in <code>@sec-cat</code> `myfile.txt`, the `myfile.txt` file is an argument to the `cat` command, specifying which file it should display.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat myfile.txt\n#  This is my file\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat 'myfile.txt'\n#  This is my file\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}