{
  "hash": "05a08f998d044ee83180c9d811949502",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n---\n\n\n\n\n\n# Arguments {#sec-args}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nArguments in Unix/Linux commands are values or data passed to commands for processing. Unlike options, which modify the behavior of commands, arguments typically specify what the command should *act upon*. This typically includes filenames, user names, data values, or other kinds of information the command needs to execute its task.\n \n## Anatomy\n\nA Unix command can be broken down into the command name, followed by its options (which we'll address in the next chapter), and then its arguments:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncommand argument1 argument2 ... argument\n```\n:::\n\n\n\n\n\n## Argument Types \n\nBelow are a variety of command arguments types. This is not an exhaustive list, but includes many of the commands and arguments you'll encounter on a regular basis.\n\n\n### Files and Directories\n\n**File and Directory Names**: Most commonly, arguments are the names of files or directories on which the command will operate.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp source.txt destination.txt\n```\n:::\n\n\n\n\n\n`source.txt` and `destination.txt` are arguments representing the source and destination files to copy with <code>@sec-cp</code>, respectively.\n\n### User and Group Names\n\n**User and Group Names**: Commands related to user management might take usernames or group names as arguments.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nchown user:group file\n```\n:::\n\n\n\n\n\n<code>@sec-chown</code> changes the ownership of `file` to `user` and `group`.\n\n### Command Targets\n\n**Command Targets**: Some commands take other commands as arguments. For example, <code>@sec-sudo</code> command runs command with superuser privileges.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo\n```\n:::\n\n\n\n\n\n### Data Values\n\n**Data Values**: Commands might take data values as arguments for processing. \n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Hello, World!\n```\n:::\n\n\n\n\n\nIn `echo Hello, World!`, `Hello, World!` is an argument that <code>@sec-echo</code> prints to the terminal.\n\n### Direct and Indirect \n\n**Direct Arguments**: These are the most straightforward type of arguments. They are typically the names of files or directories on which commands operate. \n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat myfile.txt\n#> This is my file\n```\n:::\n\n\n\n\n\n\nIn the command `cat myfile.txt`, `myfile.txt` is a direct argument to the <code>@sec-cat</code> command, telling it which file to display on the standard output.\n\n**Indirect Arguments**: These arguments might specify additional information that commands need to complete their tasks.\n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep file myfile.txt\n#> This is my file\n```\n:::\n\n\n\n\n\nThe `file` search pattern for the <code>@sec-grep</code> command is an example of an indirect command, and `myfile.txt` is the direct argument.\n\n### Position\n\n**Order**: For many commands, the order of the arguments is significant. \n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile.txt myfile2.txt\n```\n:::\n\n\n\n\n\n`myfile.txt` is the first argument (indicating the file to copy from), and `myfile2.txt` is the second argument (indicating where to copy the file to). Reversing these arguments would result in a completely different operation.\n\n**Spaces**: Arguments that contain spaces must be quoted or escaped, so the shell understands them as a single argument rather than multiple arguments. \n\n**Example** \n\nTo copy the contents of `New myfile2.txt` to `'my file 3.txt`, you would use:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile2.txt 'my file 3.txt'\n```\n:::\n\n\n\n\n\n### Command Substitution\n\n**Using Output as Arguments**: The output of a command can be used as an argument for another command using backticks (\\` \\`) or `$( )`. \n\n**Example** \n\n`echo $(grep file myfile.txt)` uses the output of the <code>@sec-grep</code> command as an argument for <code>@sec-echo</code>:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $(grep file myfile.txt)\n#> This is my file\n```\n:::\n\n\n\n\n\n### Environmental Variables\n\n**Variables as Arguments**: Environment variables can be used as arguments in commands. \n\n**Example** \n\n`echo $HOME` prints the path to the user's home directory, where `$HOME` is an argument that the <code>@sec-echo</code> command interprets:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $HOME\n#> /Users/username\n```\n:::\n\n\n\n\n\n\nUnderstanding the nuances of Unix arguments is crucial for crafting precise and effective commands, allowing users to leverage the full power of the Unix command line for a wide array of tasks.\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}