{
  "hash": "f8d100bfa6b9fd86d5b2db986cfa9192",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '#>'\n---\n\n\n\n\n\n# Arguments {#sec-args}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\nArguments in Unix/Linux commands are values or data passed to commands for processing. Unlike options, which modify the behavior of commands, arguments typically specify what the command should *act upon*. This typically includes filenames, user names, data values, or other kinds of information the command needs to execute its task.\n \n## Command and Argument Anatomy\n\nA Unix command can be broken down into the command name, followed by its options (which we'll address in the next chapter), and then its arguments:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncommand argument1 argument2 ... argument\n```\n:::\n\n\n\n\n\n### Common Arguments\n\n**File and Directory Names**: Most commonly, arguments are the names of files or directories on which the command will operate.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp source.txt destination.txt\n```\n:::\n\n\n\n\n\n`source.txt` and `destination.txt` are arguments representing the source and destination files, respectively.\n\n**User and Group Names**: Commands related to user management might take usernames or group names as arguments.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nchown user:group file\n```\n:::\n\n\n\n\n\n<code>@sec-chown</code> changes the ownership of `file` to `user` and `group`.\n\n**Command Targets**: Some commands take other commands as arguments. For example, `sudo` command runs command with superuser privileges.\n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo\n```\n:::\n\n\n\n\n\n**Data Values**: Commands might take data values as arguments for processing. \n\n**Example**\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Hello, World!\n```\n:::\n\n\n\n\n\nIn `echo Hello, World!`, `Hello, World!` is an argument that `echo` prints to the terminal.\n\n## Other Arguments \n\nBelow are other types of command arguments. This is not an exhaustive list, but includes many of the commands and arguments you'll encounter on a regular basis.\n\n### Direct and Indirect \n\n**Direct Arguments**: These are the most straightforward type of arguments. They are typically the names of files or directories on which commands operate. \n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat myfile.txt\n#> This is my file\n```\n:::\n\n\n\n\n\n\nIn the command `cat myfile.txt`, `myfile.txt` is a direct argument to the `cat` command, telling it which file to display on the standard output.\n\n**Indirect Arguments**: These arguments might specify additional information that commands need to complete their tasks.\n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep file myfile.txt\n#> This is my file\n```\n:::\n\n\n\n\n\nThe `file` search pattern for the `grep` command is an example of an indirect command, and `myfile.txt` is the direct argument.\n\n### Position\n\n**Order**: For many commands, the order of the arguments is significant. \n\n**Example** \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile.txt myfile2.txt\n```\n:::\n\n\n\n\n\n`myfile.txt` is the first argument (indicating the file to copy from), and `myfile2.txt` is the second argument (indicating where to copy the file to). Reversing these arguments would result in a completely different operation.\n\n**Spaces**: Arguments that contain spaces must be quoted or escaped, so the shell understands them as a single argument rather than multiple arguments. \n\n**Example** \n\nTo copy the contents of `New myfile2.txt` to `'my file 3.txt`, you would use:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp myfile2.txt 'my file 3.txt'\n```\n:::\n\n\n\n\n\n\n### Special Characters\n\n**Special Characters**: Characters such as spaces, tabs, asterisks, question marks, and others have special meanings in the shell. They need to be treated carefully when used within arguments.\n\n#### Asterisk: `*` {#sec-asterisk}\n\n**Glob Patterns**: Arguments can include wildcards (like `*` and `?`), which the shell expands into a list of files or directories that match the pattern. For example, `*.txt` would match all files in the current directory ending with `.txt`.\n\n`*` is the wildcard for matching zero or more characters.\n\n**Example** \n\n`ls *.md` lists all files in the current directory that end with `.md`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls *.md\n#> README.md\n```\n:::\n\n\n\n\n\n#### Question Mark: `?` {#sec-question}\n\n`?` is the wildcard for matching exactly one character.\n\n**Example** \n\n`ls myfile?.txt` lists files like `myfile2.txt`, but not `myfile.txt` and `my file 3.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls myfile?.txt\n#> myfile2.txt\n```\n:::\n\n\n\n\n\n\n#### Tilde: `~` {#sec-tilde}\n\n`~` represents the home directory of the current user.\n\n**Example** \n\nList the items in the user's home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls ~\n#> Applications\n#> Creative Cloud Files\n#> Desktop\n#> Documents\n#> Downloads\n#> Dropbox\n#> Fonts\n#> Library\n#> Movies\n#> Music\n#> Pictures\n#> Public\n#> R\n#> Themes\n```\n:::\n\n\n\n\n\n\n#### Dollar Sign: `$` {#sec-dollar}\n\n`$` indicates a variable.\n\n**Example** \n\n`echo $PATH` prints the value of the `PATH` environment variable:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $PATH\n```\n:::\n\n\n\n\n\n\n#### Ampersand: `&` {#sec-ampersand}\n\n`&` runs a command in the background.\n\n**Example** \n\n`firefox &` opens Firefox in the background, allowing the terminal to be used for other commands.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nfirefox &\n```\n:::\n\n\n\n\n\n\n#### Semicolon: `;` {#sec-semicolon}\n\n`;` separates multiple commands to be run in sequence.\n\n**Example** \n\n`cd data; ls` changes the directory to `data` and then lists its contents:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd data; ls\n#> music_vids.tsv\n#> roxanne\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n\n#### Greater Than: `>` {#sec-gt}\n\n**Redirection operators**: `>` directs output to a file or a device. \n\n**Example** \n\n`echo \"This is my 2nd file\" > myfile2.txt` writes `\"This is my 2nd file\"` into `myfile2.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"This is my 2nd file\" > myfile2.txt\n```\n:::\n\n\n\n\n\n#### Less Than: `<` {#sec-lt}\n\n**Redirection operators**: `<` takes input from a file or a device.\n\n**Example** \n\nThen `wc < myfile2.txt` counts the words in `myfile2.txt`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc < myfile2.txt\n#>        1       5      20\n```\n:::\n\n\n\n\n\n#### Braces: `{}` {#sec-braces}\n\n**Brace Expansion**: Similar to wildcards, brace expansion (`{}`) allows the creation of multiple text strings from a pattern containing braces. \n\n**Example**\n\n`cat wu_tang.{txt,csv}` \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/wu_tang.{tsv,dat}\n#> Member\tName\n#> RZA\tRobert Diggs\n#> GZA\tGary Grice\n#> Method Man\tClifford Smith\n#> Raekwon the Chef\tCorey Woods\n#> Ghostface Killah\tDennis Coles\n#> Inspectah Deck\tJason Hunter\n#> U-God\tLamont Hawkins\n#> Masta Killa\tJamel Irief\n#> Cappadonna\tDarryl Hill\n#> Ol Dirty Bastard\tRussell Tyrone Jones\n#> |Member           |Name                 |\n#> |RZA              |Robert Diggs         |\n#> |GZA              |Gary Grice           |\n#> |Method Man       |Clifford Smith       |\n#> |Raekwon the Chef |Corey Woods          |\n#> |Ghostface Killah |Dennis Coles         |\n#> |Inspectah Deck   |Jason Hunter         |\n#> |U-God            |Lamont Hawkins       |\n#> |Masta Killa      |Jamel Irief          |\n#> |Cappadonna       |Darryl Hill          |\n#> |Ol Dirty Bastard |Russell Tyrone Jones |\n```\n:::\n\n\n\n\n\nwould expand into:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat data/wu_tang.tsv \ncat data/wu_tang.dat\n#> Member\tName\n#> RZA\tRobert Diggs\n#> GZA\tGary Grice\n#> Method Man\tClifford Smith\n#> Raekwon the Chef\tCorey Woods\n#> Ghostface Killah\tDennis Coles\n#> Inspectah Deck\tJason Hunter\n#> U-God\tLamont Hawkins\n#> Masta Killa\tJamel Irief\n#> Cappadonna\tDarryl Hill\n#> Ol Dirty Bastard\tRussell Tyrone Jones\n#> |Member           |Name                 |\n#> |RZA              |Robert Diggs         |\n#> |GZA              |Gary Grice           |\n#> |Method Man       |Clifford Smith       |\n#> |Raekwon the Chef |Corey Woods          |\n#> |Ghostface Killah |Dennis Coles         |\n#> |Inspectah Deck   |Jason Hunter         |\n#> |U-God            |Lamont Hawkins       |\n#> |Masta Killa      |Jamel Irief          |\n#> |Cappadonna       |Darryl Hill          |\n#> |Ol Dirty Bastard |Russell Tyrone Jones |\n```\n:::\n\n\n\n\n\n\n#### Parentheses: `()` {#sec-parens}\n\nParentheses can be used to group commands or for command substitution with `$( )`.\n\n**Example** \n\n`(cd /var; ls)` runs `ls in /var` without changing the current directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n(cd data; ls)\n#> music_vids.tsv\n#> roxanne\n#> trees.tsv\n#> vg_hof.tsv\n#> who-tb-data.tsv\n#> wu_tang.csv\n#> wu_tang.dat\n#> wu_tang.tsv\n#> wu_tang.txt\n```\n:::\n\n\n\n\n\n`$(command)` uses the output of `command`.\n\n#### Backslash: `\\` {#sec-backslash}\n\n`\\` escapes the following character, nullifying its special meaning\n\n**Example** \n\n`echo \"File name with spaces \\& special characters\"` prints the text with spaces and the ampersand:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"File name with spaces \\& special characters\"\n#> File name with spaces \\& special characters\n```\n:::\n\n\n\n\n\n#### Single quotes: `''` {#sec-single-quotes}\n\nSingle quotes (`' '`) treat every character literally, ignoring the special meaning of all characters.\n\n**Example** \n\n`echo '$HOME'` prints `$HOME`, not the path to the home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho '$HOME'\n#> $HOME\n```\n:::\n\n\n\n\n\n#### Double quotes: `\"\"` {#sec-double-quotes}\n\nDouble quotes (`\" \"`) allow for the inclusion of special characters in an argument, except for the dollar sign (`$`), backticks (\\` \\`), and backslash (`\\`). \n\n**Example** \n\n`echo \"$HOME\"` prints the path to the home directory:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"$HOME\"\n#> /Users/username\n```\n:::\n\n\n\n\n\n### Command Substitution\n\n**Using Output as Arguments**: The output of a command can be used as an argument for another command using backticks (\\` \\`) or `$( )`. \n\n**Example** \n\n`echo $(grep file myfile.txt)` uses the output of the `grep` command as an argument for `echo`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $(grep file myfile.txt)\n#> This is my file\n```\n:::\n\n\n\n\n\n### Environmental Variables\n\n**Variables as Arguments**: Environment variables can be used as arguments in commands. \n\n**Example** \n\n`echo $HOME` prints the path to the user's home directory, where `$HOME` is an argument that the `echo` command interprets:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $HOME\n#> /Users/username\n```\n:::\n\n\n\n\n\n\nUnderstanding the nuances of Unix arguments is crucial for crafting precise and effective commands, allowing users to leverage the full power of the Unix command line for a wide array of tasks.\n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}