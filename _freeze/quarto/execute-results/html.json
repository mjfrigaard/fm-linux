{
  "hash": "946953c89c013d83aaf38599e8f6f3b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    \n---\n\n\n\n\n# Quarto {#sec-quarto}\n\n\n\n\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\n\n\n\n[Quarto](https://quarto.org/) is an '*open-source scientific and technical publishing system*' built on [Pandoc](https://pandoc.org/) that enables users to create dynamic and beautiful documents, reports, presentations, and dashboards. It is particularly useful for those looking to combine Unix/Linux command line operations with document creation, offering a way to embed executable code within documents. The next sections will guide you through writing YAML headers and Bash code chunks, two essential components when working with Quarto in a Unix/Linux context.\n\n\n\n\n\n\n:::: {.callout-note collapse='true' appearance='default' icon=false}\n\n## [Literate Programming]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\n\n> '*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*' - [Donald Knuth. Literate Programming (1984) in Literate Programming. CSLI, 1992, pg. 99.](http://www.literateprogramming.com/index.html)\n\n::: \n\n::::\n\n\n\n\n\n\n\n### YAML header {#sec-quarto-yaml}\n\n<code>@sec-yaml</code> is a lightweight markup language thatâ€™s easy to write and read. In Quarto, the `YAML` header is used to configure document properties such as the title, engine, output format, and more. It serves as the foundation for controlling how your Quarto document behaves and appears.\n\nQuarto documents are written in markdown and can include executable code in various programming languages, including Unix commands. The `YAML` header is placed between three dashes `---` at the top of each Quarto document to specify metadata and global options. \n\n```yaml\n---\ntitle: \"Using Bash\"\n---\n```\n\nTo run Bash commands, specify `knitr` in the `engine` field of in the `YAML` header of the Quarto file, and any additional key-value pairs:[^shell-reference]\n\n```yaml\n---\ntitle: \"Using Bash\"\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n```\n\n[^shell-reference]: Read more about configuring shell code blocks in Quarto in the [documentation.](https://quarto.org/docs/computations/execution-options.html#shell-commands)\n\n### Bash Code Chunks {#sec-quarto-bash}\n\nIntroduced in 1989, Bash has become the default command-line interface or \"shell\" for most Linux distributions.[^bash-macos] We'll use Bash commands and scripts to preproceess data files, render Quarto documents, and automate other operations in the data analysis pipeline, from downloading and ingesting data to creating and deploying analysis outputs.  \n\n[^bash-macos]: Bash was the default command-line interface for Apple's macOS (which is Unix-based) until the transition to `zsh` as the default shell in macOS Catalina.\n\nOne of the powerful features of Quarto is the ability to integrate executable code chunks into Markdown documents.[^quarto-bash-book] You can create bash code chunks using the following syntax:\n\n```{{bash}}\necho \"foo\" \n```\n\n[^quarto-bash-book]: In fact, this entire book was created using Quarto and executable code chunks!\n\nBash code chunks allow you to include executable commands within your Quarto documents. You can also specify the code chunk options with the hash-pipe (`#|`):[^quarto-chunk-opts] \n\n```{{bash}}\n#| code-fold: show\n#| code-summary: 'show/hide echo'\necho \"foo\" \n```\n\nWhen the document is rendered, the narrative text is included with the output from the commnads.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"show/hide echo\"}\necho \"foo\"\n## foo\n```\n:::\n\n\n\n\n[^quarto-chunk-opts]: Consult the full list of code chunk options in the [Quarto documentation](https://quarto.org/docs/reference/cells/cells-knitr.html). \n\n This simplicity allows authors to focus on their content rather than formatting. \n \n### Code Chunk Isolation\n\nWhen incorporating Bash code chunks into Quarto documents, an essential detail to remember is the behavior of the working directory during file rendering. By default, Quarto sets the working directory to the location of the current document within the project.\n\nConsider the following scenario in a Quarto project:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# This code chunk displays the current working directory\npwd\n## /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\nAlthough we can navigate to a different directory within a given code chunk:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd data # Change the current working directory to 'data' \npwd # confirm the change\n## /Users/mjfrigaard/projects/books/fm-unix/data\n```\n:::\n\n\n\n\nIt's crucial to note that Quarto resets the working directory to the document's location for each new code chunk:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Verifying the working directory, which reverts to \npwd # the document's location for each new code chunk\n## /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\nThis behavior is different than what we'd see in Posit Workbench's Terminal on my local machine:\n\n1. Assume the current working directory is `~/projects/` (as indicated by the blue highlighted area in the Terminal pane) \n\n![~/projects/](img/pwd-local-01.png){width='100%'}\n\n2. If we change my working directory with `..`, we are in the home directory `~`.\n\n![~/](img/pwd-local-02.png){width='100%'}\n\n3. When we check the current working directory again with `pwd`, we see the location has been *permanently* changed to `~`. \n\n![Still ~/](img/pwd-local-03.png){width='100%'}\n\nThis behavior can be frustrating, but it also means we'll start with a 'clean slate' in each new code chunk! \n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}