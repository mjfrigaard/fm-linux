{
  "hash": "235bb4c3a77ce8738be3527d49865f29",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    \n---\n\n\n\n\n\n# Quarto {#sec-quarto}\n\n\n\n\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon='false'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is being revised. Thank you for your patience.\n\n::: \n\n::::\n\n\n\n\n\n\n:::{layout=\"[20,80]\" layout-valign=\"top\"}\n\n![](img/logo-quarto.png){fig-align=\"center\"}\n\n[Quarto](https://quarto.org/) is an '*open-source scientific and technical publishing system*' that enables users to create dynamic and beautiful documents, reports, presentations, and dashboards. \n\n:::\n\nIt is particularly useful for those looking to combine Unix/Linux command line operations with document creation, offering a way to embed executable code within documents. The next sections will guide you through downloading and installing Quarto, `.qmd` documents, `YAML` headers and Bash code chunks.\n\n\n## [Install]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nQuarto can be installed from its [official website](https://quarto.org/docs/get-started/). Follow the platform-specific instructions to install it on your system. Make sure Quarto has been installed correctly and is available in your system’s `PATH`.\n\nCheck if Quarto is in `PATH`:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nquarto --version\n## 1.5.28\n```\n:::\n\n\n\n\n\nIf the Quarto version isn't on your `PATH`, you'll need to add the location of your quarto installation to `PATH`. You can do that with the commands below (depending on your shell).\n\n:::{layout=\"[20,80]\" layout-valign=\"center\"}\n\n**Bash**:[^bash-macos]\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n**Zsh**:[^zsh-macos]\n\n``` sh\necho 'export PATH=\"$PATH:/path/to/quarto\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\n:::\n\n[^bash-macos]: Bash is common in Linux and older macOS versions\n\n[^zsh-macos]: Zsh is now the default in shell in macOS\n\nYou can also use `which` to locate quarto path: \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"false\"}\nwhich quarto\n## /usr/local/bin/quarto\n```\n:::\n\n\n\n\n\nOn macOS, you can use `find` in the Terminal: \n\n```bash\nfind / -name quarto 2>/dev/null\n```\n\n## [Development]{style=\"font-size: 1.05em; font-weight: bold;\"} \n\nIf you decide to use Quarto documents, you'll need to decide on the tool (or development environment) you want to use. At the time of this writing, Quarto has tutorials for getting started in [RStudio](https://posit.co/download/rstudio-desktop/), [VS Code](https://code.visualstudio.com/), [Jupyter](https://jupyter.org/), [Neovim](https://neovim.io/), or a text editor (like [Sublime Text](https://www.sublimetext.com/)).[^rstudio-quarto-dev] I recommend using an IDE like [Visual Studio Code](https://code.visualstudio.com/) (VS Code) for several reasons:[^vs-codium]\n\n[^rstudio-quarto-dev]: For what its worth, I've been using RStudio for years and love it. However, I've also used Quarto in VS Code and love many of it's features. \n\n[^vs-codium]: If you prefer a 'Free/Libre Open Source Software Binary of VS Code', check out [vscodium](https://vscodium.com/)\n\n### IDE Features\n\nVS Code offers typical IDE features (syntax highlighting, code completion, linting, formatting, debugging, etc.) and a [Quarto extension](https://marketplace.visualstudio.com/items?itemName=quarto.quarto). VS Code also has a wide range of extensions for Bash scripting that can significantly streamline development.[^bash-scripting-vscode] \n\n![](img/vscode_source.png){width='80%' fig-align='center'}\n\n[^bash-scripting-vscode]: [Bash Debug](https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug) and [Bash IDE](https://marketplace.visualstudio.com/items?itemName=mads-hartmann.bash-ide-vscode) are VS Code extensions specifically designed for Bash scripting, which we'll cover in a later chapter.\n\n### Extensibility\n\nVS Code runs on multiple platforms (Windows, macOS, and Linux), which means you can maintain scripts across different environments using the same tool. \n\n:::{layout=\"[35, 65]\" layout-valign=\"top\"}\n\nVS Code also supports remote development (i.e., the ability to write and debug scripts running on remote servers and containers from your local machine).\n\n![](img/vscode_remote.png){width='80%' fig-align='center'}\n\n:::\n\n### Git Integration\n\nVS Code also has excellent support for version control systems, especially Git.\n\n:::{layout=\"[35, 65]\" layout-valign=\"top\"}\n\nThis integration makes it easier to track changes, revert to previous versions of scripts, and manage updates, all within the same editor environment.\n\n![](img/vscode_git.png){width='80%' fig-align='center'}\n\n:::\n\n### Customization\n\nVS Code can be customized and configured to suit each user's specific needs, including setting up a personalized development environment with their preferred settings, key bindings, and even look and feel.\n\n![](img/vscode_fold.png){width='80%' fig-align='center'}\n\n### Quarto Preview\n\nQuarto documents can be configured to render automatically, which gives users the ability to view document outputs as they're developed in real-time.\n\n![](img/vscode_quarto_preview.png){width='80%' fig-align='center'}\n\n### Shell integration \n\nA Terminal window is available in the IDE as a separate window, giving quick access to the command line (with multiple shell options):\n\n![](img/vscode_shells.png){width='80%' fig-align='center'}\n\nOverall, VS Code provides a powerful, versatile, and user-friendly platform to develop, maintain, and manage Shell scripts. There is also a large community around VS Code with lots of tutorials, guides, and forums where users can find support.\n\n\n## [Quarto Documents]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nQuarto documents are a flexible and powerful tool for creating dynamic and reproducible reports, presentations, and publications. Quarto documents can support multiple programming languages, including R, Python, Julia, and Bash. Users can combine narrative text with code in a single document, rendering it into various formats like HTML, PDF, and Word. \n\nThis feature proves not only invaluable for data scientists, but for anyone looking to learn a new programming language. Quarto documents are a perfect 'sandbox' to experiment with code, take notes, and review the outputs. Moreover, Quarto has the supports cross-referencing, advanced layout options, and beautiful web and book publishing workflows.[^quarto-book]\n\n[^quarto-book]: In fact, this [entire book](https://github.com/mjfrigaard/fm-unix/tree/main) was written using Quarto documents.\n\nQuarto documents consist of the following elements:\n\n1. **YAML Header**: This is used to specify the document's title, author, and output format.\n\n2. **Narrative Text**: Plain language explanations and context.\n\n3. **Code Chunks**: Executable code blocks from languages like R, Python, Bash, or Julia.\n\nAdditional features include:\n\n-   **Results**: the output is displayed directly from the executable code chunks (tables, graphs, etc.).\n\n-   **Cross-references and Citations**: Link to figures, tables, sections, or reference bibliographic sources.\n\n-   **Figures and Tables**: Markdown syntax can be used to add images and tables.\n\n-   **Appendices and Bibliography**: Footnotes and references.\n\n\n\n\n\n\n:::: {.callout-note collapse='true' appearance='default' icon='false'}\n\n## [Literate Programming]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\n\nLiterate programming is a programming paradigm that intertwines code with human-readable narrative, allowing programmers to write programs in the order best suited for human understanding. Donald Knuth developed this approach to make code more understandable and maintainable.\n  \n> '*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*' - [Donald Knuth. Literate Programming (1984) in Literate Programming. CSLI, 1992, pg. 99.](http://www.literateprogramming.com/index.html)\n  \nLiterate programming can foster clearer communication of complex programming concepts and enhances collaboration among developers.\n\n::: \n\n::::\n\n\n\n\n\n### YAML header {#sec-quarto-yaml}\n\n<code>@sec-yaml</code> is a lightweight markup language that’s easy to write and read. In Quarto, the `YAML` header is used to configure document properties such as the title, engine, output format, and more. It serves as the foundation for controlling how your Quarto document behaves and appears.\n\nQuarto documents are written in markdown and can include executable code in various programming languages, including Unix commands. The `YAML` header is placed between three dashes `---` at the top of each Quarto document to specify metadata and global options. \n\n```yaml\n---\ntitle: \"Using Bash\"\n---\n```\n\nTo run Bash commands, specify `knitr` in the `engine` field of in the `YAML` header of the Quarto file, and any additional key-value pairs:[^shell-reference]\n\n```yaml\n---\ntitle: \"Using Bash\"\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n```\n\n[^shell-reference]: Read more about configuring shell code blocks in Quarto in the [documentation.](https://quarto.org/docs/computations/execution-options.html#shell-commands)\n\n### Code Chunks {#sec-quarto-bash}\n\nOne of the powerful features of Quarto is the ability to integrate executable code chunks into Markdown documents. You can create bash code chunks using the following syntax:\n\n```{{bash}}\necho \"foo\" \n```\n\nBash code chunks allow you to include executable commands within your Quarto documents. You can also specify the code chunk options with the hash-pipe (`#|`):[^quarto-chunk-opts] \n\n```{{bash}}\n#| code-fold: show\n#| code-summary: 'show/hide echo'\necho \"foo\" \n```\n\nWhen the document is rendered, the narrative text is included with the output from the commnads.\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code  code-fold=\"show\" code-summary=\"show/hide echo\"}\necho \"foo\"\n## foo\n```\n:::\n\n\n\n\n\n[^quarto-chunk-opts]: Consult the full list of code chunk options in the [Quarto documentation](https://quarto.org/docs/reference/cells/cells-knitr.html). \n\n This simplicity allows authors to focus on their content rather than formatting. \n \n### Code Chunk Isolation\n\nWhen incorporating Bash code chunks into Quarto documents, an essential detail to remember is the behavior of the working directory during file rendering. By default, Quarto sets the working directory to the location of the current document within the project.\n\nConsider the following scenario in a Quarto project:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# This code chunk displays the current working directory\npwd\n## /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\nAlthough we can navigate to a different directory within a given code chunk:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd data # Change the current working directory to 'data' \npwd # confirm the change\n## /Users/mjfrigaard/projects/books/fm-unix/data\n```\n:::\n\n\n\n\n\nIt's crucial to note that Quarto resets the working directory to the document's location for each new code chunk:\n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Verifying the working directory, which reverts to \npwd # the document's location for each new code chunk\n## /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n\n\nThis behavior is different than what we'd see in Posit Workbench's Terminal on my local machine:\n\n1. The current working directory is `~/projects/books/fm-unix/` (as indicated by the Terminal prompt):\n\n![`fm-unix/` directory](img/pwd-local-01.png){width='100%'}\n\n2. If we change the working directory with `..`, we are in the `books/` directory (as indicated by the **books** in the Shell window):\n\n![`books/` directory](img/pwd-local-02.png){width='100%'}\n\n3. When we check the current working directory again with `pwd`, we see the location is still `~/projects/books/`. \n\n![Still in the `books/` directory](img/pwd-local-03.png){width='100%'}\n\nThis difference in behavior can be frustrating, but it also means we'll start with a 'clean slate' in each new code chunk!\n\n## [Recap]{style=\"font-size: 1.05em; font-weight: bold;\"}\n\nThis chapter covered a guide on how to use Quarto for embedding and executing Bash code, a powerful feature for Unix/Linux users and developers who need to document and automate command line tasks. \n\n  -   **Setting Up Quarto:** We covered the resources and prerequisites for installing Quarto, and how to use Quarto within Visual Studio Code (VS Code). We included setting VS Code with the Quarto extension, and options for configuring the IDE. \n\n  -   **Writing and Executing Bash Code:** We discussed setting up Bash in Quarto documents, including how to configure the YAML header in the Quarto document to include Bash as the programming language, and ensuring Quarto documents can recognize and execute Bash code.\n\nVS Code and Quarto are powerful tools. The IDE provides a user-friendly interface, extensive plugin ecosystem, and strong support for Quarto’s interactive capabilities. \n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}