{
  "hash": "1c8b65b06343b246084dec7674ad3831",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n# Common Commands {.unnumbered}\n\n\n\n\n\n:::: {.callout-important collapse='false' appearance='default' icon=false}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is under development. Thank you for your patience.\n  \n\n::: \n\n::::\n\n\nI'll tie in examples relevant to macOS, particularly focusing on files and folders you might find in the `/bin` directory, which is like a toolshed for software tools on your computer.\n\n### Navigate\n\n- **`pwd` (Print Working Directory)**: Imagine you're blindfolded in a library. Asking \"Where am I?\" would get you an answer like \"You're in the history section, on the third floor.\" `pwd` does this for your computer, telling you exactly where you are in the filesystem.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n## /Users/mjfrigaard/projects/books/fm-unix\n```\n:::\n\n\n\n- **`cd` (Change Directory)**: If you want to move from the history section to the science fiction section in the library, you'd walk over there. `cd` lets you move to a different folder on your computer. For example, `cd /bin` takes you to the `/bin` folder, the toolshed of software tools.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin\n# confirm \npwd\n## /bin\n```\n:::\n\n\n- **`ls` (List)**: Standing in the middle of the library and spinning around with your arms outstretched, you'd touch the bookshelves around you. `ls` is like this, showing you what files and folders are around you. In `/bin`, it would show you the software tools available.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd /bin\nls \n## [\n## bash\n## cat\n## chmod\n## cp\n## csh\n## dash\n## date\n## dd\n## df\n## echo\n## ed\n## expr\n## hostname\n## kill\n## ksh\n## launchctl\n## link\n## ln\n## ls\n## mkdir\n## mv\n## pax\n## ps\n## pwd\n## realpath\n## rm\n## rmdir\n## sh\n## sleep\n## stty\n## sync\n## tcsh\n## test\n## unlink\n## wait4path\n## zsh\n```\n:::\n\n\n\n- **`file`**: If you pick up a book and aren't sure what it's about, you might look at the cover or the summary on the back. `file` gives you a summary of what a computer file is or what it contains, like telling you if a tool in `/bin` is a program you can run or a text file.\n\n- **`less`**: When you find a hefty book, you might skim through it instead of reading every word. `less` lets you skim through a file on your computer, moving forwards and backwards as you please.\n\n### Manipulate Files and Folders\n\n- **`mkdir` (Make Directory)**: Deciding you need a new shelf for your comic book collection, you build one. `mkdir` builds a new folder wherever you tell it to, like making a new folder for projects in `/bin`, although you typically wouldn't do that there.\n\n- **`cp` (Copy)**: Photocopying your friend's recipe so you both can have a copy, `cp` duplicates files or folders. For instance, copying a tool from `/bin` to your desktop, but usually, you leave `/bin` tools where they are.\n\n- **`mv` (Move)**: Taking a book from your desk and putting it on the shelf, `mv` moves files or folders from one place to another. It's like moving a misplaced tool back into `/bin`.\n\n- **`rm` (Remove)**: Throwing away an old, tattered magazine, `rm` deletes files or folders. Be cautious, as this is like shredding documentsâ€”no easy way to get them back.\n\n- **`ln` (Link)**: Creating a shortcut on your desktop to a frequently used program, `ln` creates links to files, making them accessible from multiple places without duplicating them.\n\n### Manipulate Text\n\n- **`cat` (Concatenate)**: Laying out pages on the floor to see them all at once, `cat` displays the content of files straight to your screen, useful for checking what's in a text file quickly.\n\n- **`sort`**: Organizing a stack of papers alphabetically, `sort` arranges the lines in a text file into order.\n\n- **`uniq`**: After accidentally printing duplicates of a document, you remove the extra copies. `uniq` helps by removing duplicate lines from a file, making sure every line is unique.\n\n- **`cut`**: If you only want the dates from a list of events, you might physically cut them out of the paper. `cut` extracts specific parts of lines in a file, like cutting out columns of text.\n\n- **`paste`**: Taking snippets of text from different documents and sticking them together into one, `paste` combines lines from multiple files side by side.\n\n- **`join`**: If you have two lists with common information, you might merge them based on what matches. `join` merges lines from two files based on a common field.\n\n- **`comm` (Compare)**: Laying two printed lists side by side to see what items appear on both, only on one, or the other, `comm` compares two sorted files line by line.\n\n- **`diff` (Difference)**: Highlighting what changes have been made between your draft and the final copy of a letter, `diff` shows the differences between two files.\n\nThese analogies help demystify what can feel like complex commands, tying them back to everyday actions and decisions.\n\n\n\n\n:::: {.callout-note collapse='false' appearance='default' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 0.95em;'}\n\n::: {style='font-size: 0.90em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/fm-unix/issues/new)\n\n::: \n\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}