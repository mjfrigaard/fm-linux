---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
---

# Common Commands {.unnumbered}

```{r}
#| label: setup
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

I'll tie in examples relevant to macOS, particularly focusing on files and folders you might find in the `/bin` directory, which is like a toolshed for software tools on your computer.

### Navigate

- **`pwd` (Print Working Directory)**: Imagine you're blindfolded in a library. Asking "Where am I?" would get you an answer like "You're in the history section, on the third floor." `pwd` does this for your computer, telling you exactly where you are in the filesystem.

```{bash}
pwd
```


- **`cd` (Change Directory)**: If you want to move from the history section to the science fiction section in the library, you'd walk over there. `cd` lets you move to a different folder on your computer. For example, `cd /bin` takes you to the `/bin` folder, the toolshed of software tools.

```{bash}
cd /bin
# confirm 
pwd
```

- **`ls` (List)**: Standing in the middle of the library and spinning around with your arms outstretched, you'd touch the bookshelves around you. `ls` is like this, showing you what files and folders are around you. In `/bin`, it would show you the software tools available.

```{bash}
cd /bin
ls 
```


- **`file`**: If you pick up a book and aren't sure what it's about, you might look at the cover or the summary on the back. `file` gives you a summary of what a computer file is or what it contains, like telling you if a tool in `/bin` is a program you can run or a text file.

- **`less`**: When you find a hefty book, you might skim through it instead of reading every word. `less` lets you skim through a file on your computer, moving forwards and backwards as you please.

### Manipulate Files and Folders

- **`mkdir` (Make Directory)**: Deciding you need a new shelf for your comic book collection, you build one. `mkdir` builds a new folder wherever you tell it to, like making a new folder for projects in `/bin`, although you typically wouldn't do that there.

- **`cp` (Copy)**: Photocopying your friend's recipe so you both can have a copy, `cp` duplicates files or folders. For instance, copying a tool from `/bin` to your desktop, but usually, you leave `/bin` tools where they are.

- **`mv` (Move)**: Taking a book from your desk and putting it on the shelf, `mv` moves files or folders from one place to another. It's like moving a misplaced tool back into `/bin`.

- **`rm` (Remove)**: Throwing away an old, tattered magazine, `rm` deletes files or folders. Be cautious, as this is like shredding documentsâ€”no easy way to get them back.

- **`ln` (Link)**: Creating a shortcut on your desktop to a frequently used program, `ln` creates links to files, making them accessible from multiple places without duplicating them.

### Manipulate Text

- **`cat` (Concatenate)**: Laying out pages on the floor to see them all at once, `cat` displays the content of files straight to your screen, useful for checking what's in a text file quickly.

- **`sort`**: Organizing a stack of papers alphabetically, `sort` arranges the lines in a text file into order.

- **`uniq`**: After accidentally printing duplicates of a document, you remove the extra copies. `uniq` helps by removing duplicate lines from a file, making sure every line is unique.

- **`cut`**: If you only want the dates from a list of events, you might physically cut them out of the paper. `cut` extracts specific parts of lines in a file, like cutting out columns of text.

- **`paste`**: Taking snippets of text from different documents and sticking them together into one, `paste` combines lines from multiple files side by side.

- **`join`**: If you have two lists with common information, you might merge them based on what matches. `join` merges lines from two files based on a common field.

- **`comm` (Compare)**: Laying two printed lists side by side to see what items appear on both, only on one, or the other, `comm` compares two sorted files line by line.

- **`diff` (Difference)**: Highlighting what changes have been made between your draft and the final copy of a letter, `diff` shows the differences between two files.

These analogies help demystify what can feel like complex commands, tying them back to everyday actions and decisions.


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```