---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
---

# Introduction {#sec-intro}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

### The Tale of Unix

Imagine Unix and Linux as the master and apprentice in the vast workshop of computer operating systems. Our story begins in the late 1960s at AT&T's Bell Labs. Unix was born out of a desire for a more flexible and portable operating system. It was a time when computers were as big as rooms and operated on specific, often incompatible, systems. Unix was a breath of fresh air because it was designed to be simple, elegant, and, most importantly, portable, meaning it could run on different types of hardware. 

The Unix philosophy has been distilled into a comprehensive operating system of essential commands and operations, guiding other apprentices in creating their versions of tools and systems.

Unix is like the master craftsman in this story, having laid the foundational tools and techniques, and crafting a blueprint for how computers could efficiently and securely manage tasks like organizing files or running software. 

### The Emergence of Linux

Fast forward a couple of decades to 1991, when a Finnish student named Linus Torvalds decided to create his own free operating system kernel, inspired by Unix. This kernel, which is at the heart of the Linux operating system, was made freely available to anyone who wanted to use or improve it. 

Linux flourished with the help of developers around the world. It's a testament to what collaboration and shared goals can achieve. This global effort resulted in an operating system that is not only free but also incredibly powerful and reliable.

Linux, inspired by the teachings of Unix, was the eager apprentice who learned from the master's manual and decided to share its own set of tools with the world for free. Making it free meant anyone could contribute their skills, refine the tools, and share the fruits of their labor. This open-source community of developers eventually cultivated various specialties, known as "distributions," each with ts unique set of tools and embellishments, yet all rooted in the same foundational teachings.

```{r}
#| label: co_box_modern_unix
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  look = "default", 
  hsize = "1.10", 
  size = "1.0", 
  header = "Modern Uses of Unix/Linux", 
  fold = TRUE,
  contents = "\n
Today, Unix and Linux are everywhere. They're the invisible forces behind much of the Internet and are responsible for running servers, desktops, smartphones, and even household appliances. 

- **Servers and Supercomputers**: The majority of the web servers powering the internet, as well as the world's most powerful supercomputers, run on Linux due to its stability, security, and efficiency.

- **Desktops**: Although not as common on desktops as Windows or macOS, Linux distributions offer a free, customizable alternative for users.

- **Smartphones**: Android, the most popular mobile operating system, is powered by a Linux kernel, making Linux the silent workhorse behind billions of smartphones.

- **Embedded Systems**: From smartwatches to smart home devices, Linux is often the go-to choice for running embedded systems thanks to its scalability and low cost.

Unix and Linux have grown from niche systems used by academics and researchers to foundational elements that power much of the digital world. They exemplify the power of open collaboration and innovation, showing how a small project or idea can grow and change the world.")
```

### The Shell

In the story of Unix and Linux, @sec-shells are the interpreters that translate commands into actions a computer can understand and execute. If Unix and Linux are the environments *where* the heavy lifting of computing happens—managing files, running programs, and controlling hardware—then the shell commands are the language and syntax that spells out *how* the work happens. 

***

## Recap

To summarize, Unix and Linux provide the underlying framework for computer programs. They're like the behind-the-scenes craftsmen ensuring the workshop runs smoothly, whether crafting a simple piece of furniture (like running a straightforward program on your computer), or constructing an elaborate mansion (like managing the complex operations of a large server). 

The shell is like the skilled artisan's primary tool within the grand workshop of Unix and Linux, serving as a bridge between the user and the system's deeper capabilities. Just as a master carpenter relies on a trusted hammer or saw, users of Unix and Linux turn to the shell for navigating and manipulating the vast landscape of these operating systems.


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
