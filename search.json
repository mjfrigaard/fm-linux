[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fm-unix",
    "section": "",
    "text": "Welcome!\nWelcome to the start of your Unix and Linux journey. This book is designed with the non-technical audience in mind, providing a clear understanding of the concepts and commands of Unix/Linux to make them accessible to everyone. Whether you are a student, a professional from a non-IT field, or merely someone curious about operating systems, this book will guide you through the essentials of Unix/Linux.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "fm-unix",
    "section": "Preface",
    "text": "Preface\nUnix and Linux are powerful, versatile, and widely used operating systems that run on millions of devices worldwide, from smartphones to supercomputers. Learning about Unix/Linux opens doors to many career opportunities and equips you with the knowledge to understand the digital world around you better.\nThis book is structured to gradually introduce you to the Unix/Linux environment, starting from the basics to more complex concepts. Here is the summary of what each section covers:\nIntroduction\nThis section will begin with some Unix/Linux command-line basics.\n\nSet-Up: Before diving into the commands and scripts, it’s essential to have your Unix/Linux environment ready. This section will guide you through setting up Unix/Linux on your machine, be it natively or through a virtual machine. We will ensure that you have a solid foundation to learn and practice the commands and scripts discussed in the subsequent sections.\nCommands: The command line is at the core of Unix/Linux, offering a powerful way to interact with the operating system. In this section, you will learn basic commands for navigating the file system, managing files and directories, and obtaining system information. These commands are the building blocks for more complex operations in Unix/Linux.\nPipes: Pipes are a unique feature in Unix/Linux that allows you to combine multiple commands to perform complex tasks. This section will introduce the concept of pipes, teaching you how to redirect the output of one command to the input of another, thereby enabling efficient data processing and manipulation.\n\nShell Scripts\nShell scripting is a powerful tool for automating repetitive tasks in Unix/Linux. This section will introduce you to writing your shell scripts, covering the basics of script creation, execution, and debugging. You’ll learn how to automate simple tasks, making your Unix/Linux experience more productive and enjoyable.\n\nFormats: Shell scripts can be written in various formats, depending on the shell you’re using (e.g., Bash, Zsh). This section delves into the differences between these formats, guiding you on writing compatible scripts that can run across different Unix/Linux systems.\nPermissions: Understanding file permissions is crucial for managing the security of your files and directories in Unix/Linux. This section will explain how Unix/Linux permissions work, teaching you how to set and modify permissions to protect your data and system from unauthorized access.\n\nBy the end of this book, you’ll have a solid understanding of the Unix/Linux operating system and will be equipped with the knowledge to navigate, manage files, write scripts, and set permissions confidently. Whether you’re looking to enhance your career prospects, manage your Unix/Linux systems, or merely satisfy your curiosity, this book will be your companion on a fascinating journey into the world of Unix/Linux.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#section-1",
    "href": "index.html#section-1",
    "title": "fm-unix",
    "section": "",
    "text": "See a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nThis is a book created from markdown and executable code.\n\n“Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.” - Donald Knuth. “Literate Programming (1984)” in Literate Programming. CSLI, 1992, pg. 99.\n\n\nwhoami\n## mjfrigaard\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set-Up",
    "section": "",
    "text": "Using Bash in Quarto\nFollow the instructions on the Quarto website to configure your HTML documents to run Bash code chunks.",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#using-bash-in-quarto",
    "href": "setup.html#using-bash-in-quarto",
    "title": "Set-Up",
    "section": "",
    "text": "Document header\nSpecify the engine field of in the YAML header of the .qmd file:\n---\ntitle: \"Using Bash\"\nengine: knitr\n---\nYou can also add any knitr chunk options:\nknitr:\n  opts_chunk: \n    collapse: true\n\n\nCode Chunks\nThe code chunks function like R or Python code chunks:\n```{bash}\necho \"foo\" \n```\nYou caan also specify the code chunk options with the hash-pipe:\n```{bash}\n#| code-fold: show\n#| code-summary: 'show/hide echo'\necho \"foo\" \n```\n\n\nshow/hide echo\necho \"foo\"\n## foo",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#terminal-macos",
    "href": "setup.html#terminal-macos",
    "title": "Set-Up",
    "section": "Terminal (macOS)",
    "text": "Terminal (macOS)",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#virtual-machines",
    "href": "setup.html#virtual-machines",
    "title": "Set-Up",
    "section": "Virtual Machines",
    "text": "Virtual Machines\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "common_commands.html",
    "href": "common_commands.html",
    "title": "Common Commands",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nI’ll tie in examples relevant to macOS, particularly focusing on files and folders you might find in the /bin directory, which is like a toolshed for software tools on your computer.\n\nNavigate\n\npwd (Print Working Directory): Imagine you’re blindfolded in a library. Asking “Where am I?” would get you an answer like “You’re in the history section, on the third floor.” pwd does this for your computer, telling you exactly where you are in the filesystem.\n\n\npwd\n## /Users/mjfrigaard/projects/books/fm-unix\n\n\ncd (Change Directory): If you want to move from the history section to the science fiction section in the library, you’d walk over there. cd lets you move to a different folder on your computer. For example, cd /bin takes you to the /bin folder, the toolshed of software tools.\n\n\ncd /bin\n# confirm \npwd\n## /bin\n\n\nls (List): Standing in the middle of the library and spinning around with your arms outstretched, you’d touch the bookshelves around you. ls is like this, showing you what files and folders are around you. In /bin, it would show you the software tools available.\n\n\ncd /bin\nls \n## [\n## bash\n## cat\n## chmod\n## cp\n## csh\n## dash\n## date\n## dd\n## df\n## echo\n## ed\n## expr\n## hostname\n## kill\n## ksh\n## launchctl\n## link\n## ln\n## ls\n## mkdir\n## mv\n## pax\n## ps\n## pwd\n## realpath\n## rm\n## rmdir\n## sh\n## sleep\n## stty\n## sync\n## tcsh\n## test\n## unlink\n## wait4path\n## zsh\n\n\nfile: If you pick up a book and aren’t sure what it’s about, you might look at the cover or the summary on the back. file gives you a summary of what a computer file is or what it contains, like telling you if a tool in /bin is a program you can run or a text file.\nless: When you find a hefty book, you might skim through it instead of reading every word. less lets you skim through a file on your computer, moving forwards and backwards as you please.\n\n\n\nManipulate Files and Folders\n\nmkdir (Make Directory): Deciding you need a new shelf for your comic book collection, you build one. mkdir builds a new folder wherever you tell it to, like making a new folder for projects in /bin, although you typically wouldn’t do that there.\ncp (Copy): Photocopying your friend’s recipe so you both can have a copy, cp duplicates files or folders. For instance, copying a tool from /bin to your desktop, but usually, you leave /bin tools where they are.\nmv (Move): Taking a book from your desk and putting it on the shelf, mv moves files or folders from one place to another. It’s like moving a misplaced tool back into /bin.\nrm (Remove): Throwing away an old, tattered magazine, rm deletes files or folders. Be cautious, as this is like shredding documents—no easy way to get them back.\nln (Link): Creating a shortcut on your desktop to a frequently used program, ln creates links to files, making them accessible from multiple places without duplicating them.\n\n\n\nManipulate Text\n\ncat (Concatenate): Laying out pages on the floor to see them all at once, cat displays the content of files straight to your screen, useful for checking what’s in a text file quickly.\nsort: Organizing a stack of papers alphabetically, sort arranges the lines in a text file into order.\nuniq: After accidentally printing duplicates of a document, you remove the extra copies. uniq helps by removing duplicate lines from a file, making sure every line is unique.\ncut: If you only want the dates from a list of events, you might physically cut them out of the paper. cut extracts specific parts of lines in a file, like cutting out columns of text.\npaste: Taking snippets of text from different documents and sticking them together into one, paste combines lines from multiple files side by side.\njoin: If you have two lists with common information, you might merge them based on what matches. join merges lines from two files based on a common field.\ncomm (Compare): Laying two printed lists side by side to see what items appear on both, only on one, or the other, comm compares two sorted files line by line.\ndiff (Difference): Highlighting what changes have been made between your draft and the final copy of a letter, diff shows the differences between two files.\n\nThese analogies help demystify what can feel like complex commands, tying them back to everyday actions and decisions.\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Common Commands"
    ]
  },
  {
    "objectID": "advanced_commands.html",
    "href": "advanced_commands.html",
    "title": "Advanced Commands",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nAdvanced commands.\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Advanced Commands"
    ]
  },
  {
    "objectID": "pipes.html",
    "href": "pipes.html",
    "title": "Pipes",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nUsing the |\n\nls /bin | head -n5\n## [\n## bash\n## cat\n## chmod\n## cp\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Pipes"
    ]
  },
  {
    "objectID": "scripts.html",
    "href": "scripts.html",
    "title": "Shell Scripts",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts"
    ]
  },
  {
    "objectID": "format.html",
    "href": "format.html",
    "title": "Format",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nShell script formats.\n#!/bin/bash\n# This is our first script.\necho 'Hello World!'\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts",
      "Format"
    ]
  },
  {
    "objectID": "permissions.html",
    "href": "permissions.html",
    "title": "Permissions",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nFile permissions with chmod\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts",
      "Permissions"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  }
]