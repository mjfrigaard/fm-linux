[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fm-unix",
    "section": "",
    "text": "Welcome!\nWelcome to the start of your Unix and Linux journey. This book is designed with the non-technical audience in mind, providing a clear understanding of the concepts and commands of Unix/Linux to make them accessible to everyone. Whether you are a student, a professional from a non-IT field, or merely someone curious about operating systems, this book will guide you through the essentials of Unix/Linux.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "fm-unix",
    "section": "Preface",
    "text": "Preface\nUnix and Linux are powerful, versatile, and widely used operating systems that run on millions of devices worldwide, from smartphones to supercomputers. Learning about Unix/Linux opens doors to many career opportunities and equips you with the knowledge to understand the digital world around you better.\nThis book is structured to gradually introduce you to the Unix/Linux environment, starting from the basics to more complex concepts. Here is the summary of what each section covers:\nIntroduction\nThis section will begin with some Unix/Linux command-line basics.\n\nSet-Up: Before diving into the commands and scripts, it’s essential to have your Unix/Linux environment ready. This section will guide you through setting up Unix/Linux on your machine, be it natively or through a virtual machine. We will ensure that you have a solid foundation to learn and practice the commands and scripts discussed in the subsequent sections.\nCommands: The command line is at the core of Unix/Linux, offering a powerful way to interact with the operating system. In this section, you will learn basic commands for navigating the file system, managing files and directories, and obtaining system information. These commands are the building blocks for more complex operations in Unix/Linux.\nPipes: Pipes are a unique feature in Unix/Linux that allows you to combine multiple commands to perform complex tasks. This section will introduce the concept of pipes, teaching you how to redirect the output of one command to the input of another, thereby enabling efficient data processing and manipulation.\n\nShell Scripts\nShell scripting is a powerful tool for automating repetitive tasks in Unix/Linux. This section will introduce you to writing your shell scripts, covering the basics of script creation, execution, and debugging. You’ll learn how to automate simple tasks, making your Unix/Linux experience more productive and enjoyable.\n\nFormats: Shell scripts can be written in various formats, depending on the shell you’re using (e.g., Bash, Zsh). This section delves into the differences between these formats, guiding you on writing compatible scripts that can run across different Unix/Linux systems.\nPermissions: Understanding file permissions is crucial for managing the security of your files and directories in Unix/Linux. This section will explain how Unix/Linux permissions work, teaching you how to set and modify permissions to protect your data and system from unauthorized access.\n\nBy the end of this book, you’ll have a solid understanding of the Unix/Linux operating system and will be equipped with the knowledge to navigate, manage files, write scripts, and set permissions confidently. Whether you’re looking to enhance your career prospects, manage your Unix/Linux systems, or merely satisfy your curiosity, this book will be your companion on a fascinating journey into the world of Unix/Linux.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#section-1",
    "href": "index.html#section-1",
    "title": "fm-unix",
    "section": "",
    "text": "See a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set-Up",
    "section": "",
    "text": "Using Bash in Quarto\nQuarto is an open-source scientific and technical publishing framework that enables users to create dynamic and beautiful documents, reports, presentations, and dashboards.\nQuarto documents are built to work with various programming languages, including R, Python, Julia, and Observable JavaScript, which makes it a versatile tool for data scientists, researchers, and anyone involved in data analysis. However, you can also use Quarto to run Unix commands–specifically, Bash.1",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#using-bash-in-quarto",
    "href": "setup.html#using-bash-in-quarto",
    "title": "Set-Up",
    "section": "",
    "text": "Document header\nSpecify the engine field of in the YAML header of the .qmd file, and any knitr chunk options:\n---\ntitle: \"Using Bash\"\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\nCode Chunks\n\n“Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.” - Donald Knuth. “Literate Programming (1984)” in Literate Programming. CSLI, 1992, pg. 99.\n\nQuarto documents are written in markdown, a lightweight markup language that’s easy to write and read. This simplicity allows authors to focus on their content rather than formatting. One of the powerful aspects of Quarto is its ability to integrate executable code chunks into Markdown documents (in fact, this entire book was created using markdown and executable code chunks).\n```{bash}\necho \"foo\" \n```\nYou can also specify the code chunk options with the hash-pipe (#|):\n\n\nshow/hide echo\necho \"foo\"\n## foo\n\n\n```{bash}\n#| code-fold: show\n#| code-summary: 'show/hide echo'\necho \"foo\" \n```",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#terminal-macos",
    "href": "setup.html#terminal-macos",
    "title": "Set-Up",
    "section": "Terminal (macOS)",
    "text": "Terminal (macOS)",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#virtual-machines",
    "href": "setup.html#virtual-machines",
    "title": "Set-Up",
    "section": "Virtual Machines",
    "text": "Virtual Machines\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "setup.html#footnotes",
    "href": "setup.html#footnotes",
    "title": "Set-Up",
    "section": "",
    "text": "Follow these instructions on the Quarto website to configure your HTML documents to run Bash code chunks.↩︎",
    "crumbs": [
      "Introduction",
      "Set-Up"
    ]
  },
  {
    "objectID": "navigate.html",
    "href": "navigate.html",
    "title": "Navigate",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nWhen presented with a new map, the most important thing to find is your location on it. It’s hard to know where you’re going without knowing where you are.\n\npwd\npwd (Print Working Directory) tells you exactly where you are in the filesystem.\n\npwd # where am I?\n#  /Users/mjfrigaard/projects/books/fm-unix\n\n\n\ncd\ncd (Change Directory) lets you move to a different folder on your computer.\nIf you want to move from the one place to another, cd can get you there. For example, cd /bin takes you to the /bin folder, the toolshed of software tools.\n\ncd /bin # change location\npwd # now where am I?\n#  /bin\n\n\n\nls\nls (List) is like standing in one location, looking around, and seeing what files and folders are around you. In /bin, ls would show you the software tools available:\n\ncd /bin # change location\nls # what's in here?\n#  [\n#  bash\n#  cat\n#  chmod\n#  cp\n#  csh\n#  dash\n#  date\n#  dd\n#  df\n#  echo\n#  ed\n#  expr\n#  hostname\n#  kill\n#  ksh\n#  launchctl\n#  link\n#  ln\n#  ls\n#  mkdir\n#  mv\n#  pax\n#  ps\n#  pwd\n#  realpath\n#  rm\n#  rmdir\n#  sh\n#  sleep\n#  stty\n#  sync\n#  tcsh\n#  test\n#  unlink\n#  wait4path\n#  zsh\n\n\n\nfile\nfile gives you a summary of what a computer file is or what it contains, like telling you if a tool in /bin/pax is a program you can run or a text file.\n\nfile /bin/pax\n#  /bin/pax: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64e:Mach-O 64-bit executable arm64e]\n#  /bin/pax (for architecture x86_64):  Mach-O 64-bit executable x86_64\n#  /bin/pax (for architecture arm64e):  Mach-O 64-bit executable arm64e\n\n\n\nless\nless lets you skim through a file on your computer, moving forwards and backwards as you please.\n\nless data/gamehof.tsv\n\n\n\n\nEnter less in the Terminal\n\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Navigate"
    ]
  },
  {
    "objectID": "files_folders.html",
    "href": "files_folders.html",
    "title": "Files and Folders",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\nmkdir\nmkdir (Make Directory) builds a new folder wherever you tell it to, like making a new folder for projects in /bin (although you typically wouldn’t do that there)\n\n\ncp\ncp (Copy) duplicates files or folders. For instance, copying a tool from /bin to your desktop, but usually, you leave /bin tools where they are.\n\n\nmv\n\nmv (Move): Taking a book from your desk and putting it on the shelf, mv moves files or folders from one place to another. It’s like moving a misplaced tool back into /bin.\n\n\n\nrm\nrm (Remove): Throwing away an old, tattered magazine, rm deletes files or folders. Be cautious, as this is like shredding documents—no easy way to get them back.\n\n\nln\nln (Link): Creating a shortcut on your desktop to a frequently used program, ln creates links to files, making them accessible from multiple places without duplicating them.",
    "crumbs": [
      "Introduction",
      "Files and Folders"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "Manipulate Text",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\ncat\ncat (Concatenate): Laying out pages on the floor to see them all at once, cat displays the content of files straight to your screen, useful for checking what’s in a text file quickly.\n\n\nsort\nsort: Organizing a stack of papers alphabetically, sort arranges the lines in a text file into order.\n\n\nuniq\nuniq: After accidentally printing duplicates of a document, you remove the extra copies. uniq helps by removing duplicate lines from a file, making sure every line is unique.\n\n\ncut\ncut: If you only want the dates from a list of events, you might physically cut them out of the paper. cut extracts specific parts of lines in a file, like cutting out columns of text.\n\n\npaste\npaste: Taking snippets of text from different documents and sticking them together into one, paste combines lines from multiple files side by side.\n\n\njoin\njoin: If you have two lists with common information, you might merge them based on what matches. join merges lines from two files based on a common field.\n\n\ncomm\ncomm (Compare): Laying two printed lists side by side to see what items appear on both, only on one, or the other, comm compares two sorted files line by line.\n\n\ndiff\ndiff (Difference): Highlighting what changes have been made between your draft and the final copy of a letter, diff shows the differences between two files.\nThese analogies help demystify what can feel like complex commands, tying them back to everyday actions and decisions.\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Manipulate Text"
    ]
  },
  {
    "objectID": "pipes.html",
    "href": "pipes.html",
    "title": "Pipes",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nUsing the |\n\nls /bin | head -n5\n## [\n## bash\n## cat\n## chmod\n## cp\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction",
      "Pipes"
    ]
  },
  {
    "objectID": "format.html",
    "href": "format.html",
    "title": "Format",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nShell script formats.\n#!/bin/bash\n# This is our first script.\necho 'Hello World!'\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts",
      "Format"
    ]
  },
  {
    "objectID": "permissions.html",
    "href": "permissions.html",
    "title": "Permissions",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\nFile permissions with chmod\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts",
      "Permissions"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  },
  {
    "objectID": "scripts.html",
    "href": "scripts.html",
    "title": "Shell Scripts",
    "section": "",
    "text": "Caution\n\n\n\n\n\n\nThis section is under development. Thank you for your patience.\n\n\n\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Shell Scripts"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Background\nUnix and Linux are like the great ancestors and heroes of the computer world, with stories full of innovation, community, and evolution.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#background",
    "href": "intro.html#background",
    "title": "Introduction",
    "section": "",
    "text": "The Tale of Unix\nImagine Unix and Linux as the master and apprentice in the vast workshop of computer operating systems. Our story begins in the late 1960s at AT&T’s Bell Labs. Unix was born out of a desire for a more flexible and portable operating system. It was a time when computers were as big as rooms and operated on specific, often incompatible, systems. Unix was a breath of fresh air because it was designed to be simple, elegant, and, most importantly, portable, meaning it could run on different types of hardware.\nThe Unix philosophy has been distilled into a comprehensive operating system of essential commands and operations, guiding other apprentices in creating their versions of tools and systems.\nUnix is like the master craftsman in this story, having laid the foundational tools and techniques, and crafting a blueprint for how computers could efficiently and securely manage tasks like organizing files or running software.\n\n\nThe Emergence of Linux\nFast forward a couple of decades to 1991, when a Finnish student named Linus Torvalds decided to create his own free operating system kernel, inspired by Unix. This kernel, which is at the heart of the Linux operating system, was made freely available to anyone who wanted to use or improve it.\nLinux flourished with the help of developers around the world. It’s a testament to what collaboration and shared goals can achieve. This global effort resulted in an operating system that is not only free but also incredibly powerful and reliable.\nLinux, inspired by the teachings of Unix, was the eager apprentice who learned from the master’s manual and decided to share its own set of tools with the world for free. Making it free meant anyone could contribute their skills, refine the tools, and share the fruits of their labor. This open-source community of developers eventually cultivated various specialties, known as “distributions,” each with ts unique set of tools and embellishments, yet all rooted in the same foundational teachings.\n\n\nModern Uses\nToday, Unix and Linux are everywhere. They’re the invisible forces behind much of the Internet and are responsible for running servers, desktops, smartphones, and even household appliances.\n\nServers and Supercomputers: The majority of the web servers powering the internet, as well as the world’s most powerful supercomputers, run on Linux due to its stability, security, and efficiency.\nDesktops: Although not as common on desktops as Windows or macOS, Linux distributions offer a free, customizable alternative for users.\nSmartphones: Android, the most popular mobile operating system, is powered by a Linux kernel, making Linux the silent workhorse behind billions of smartphones.\nEmbedded Systems: From smartwatches to smart home devices, Linux is often the go-to choice for running embedded systems thanks to its scalability and low cost.\n\nUnix and Linux have grown from niche systems used by academics and researchers to foundational elements that power much of the digital world. They exemplify the power of open collaboration and innovation, showing how a small project or idea can grow and change the world.\nTo summarize, Unix and Linux provide the underlying framework for computer programs. They’re like the behind-the-scenes craftsmen ensuring the workshop runs smoothly, whether crafting a simple piece of furniture (like running a straightforward program on your computer), or constructing an elaborate mansion (like managing the complex operations of a large server).\nThe first four chapters will cover an introduction to some common commands in Unix/Linux. These will help you find your way around your machine’s folders and files. We’ll also cover how to manipulate text within files.\n\nwhoami\n## mjfrigaard\n\n\n\n\n\n\n\nSee a typo, error, or something missing?\n\n\n\n\n\n\nPlease open an issue on GitHub.",
    "crumbs": [
      "Introduction"
    ]
  }
]